using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Services;
using System.Web.UI;
using System.Web.UI.WebControls;
using Business;
using CCA.Util;
using PayPalIntegration;
using Stripe;

namespace RESTFulWCFService.MassagePartener
{
    public partial class faq : System.Web.UI.Page
    {
        BussinessPaypal obj = new BussinessPaypal();
        BussinessSendMail objmail = new BussinessSendMail();
        private bool PayPalReturnRequest = false;
        protected decimal OrderAmount = 0.00M; 
        #region objects
        private int PageSize = 2;
        PagedDataSource adsource;
        GetSiteURL gestsiteurl = new GetSiteURL();
        RegistrationBusiness objRegistrationBusiness = new RegistrationBusiness();
        Business.BusinessLogin objBusinessLogin = new BusinessLogin();
        Business.BusinessMPartener objbusinessmpartener = new BusinessMPartener();
        Business.BusinessSearch objBusinessSearch = new Business.BusinessSearch();
        DataTable dt;
        static int i = 0;
        private string Uip { get; set; }
        private string Ucountry { get; set; }
        private string Ustate { get; set; }
        private string Ucity { get; set; }
        private string UArea { get; set; }
        private string Lag { get; set; }
        private string Lat { get; set; }
        #endregion
        

        protected void Page_Load(object sender, EventArgs e)
        {
            if (Session["massage_partner_sk"] != null)
            {
                lnklogin.Visible = false;
                lnkpayment.Visible = true;

                if (Session["country_sk"].ToString() != "100")
                {
                    div_India_User.Visible = false;
                }

                txtregisteredmail_id.Text = Session["email_id"].ToString();
                partner_sk.Value = Session["massage_partner_sk"].ToString();

                Response.AddHeader("Refresh", Convert.ToString((Session.Timeout * 60) - 120));
                if (Session["seeker_subscribed"] == null)
                    hdnpartnersubscribed.Value = "";
                else
                    hdnpartnersubscribed.Value = Session["seeker_subscribed"].ToString();

                if (hdnpartnersubscribed.Value == null || hdnpartnersubscribed.Value == "" || hdnpartnersubscribed.Value == "N")
                {
                    lnklogin.Visible = false;
                    lnkpayment.Visible = true;
                }
                else
                {
                    lnklogin.Visible = false;
                    lnkpayment.Visible = false;
                }

                ViewState["massage_partner_sk"] = Session["massage_partner_sk"].ToString();
                ViewState["LoginSk"] = Session["mp_login_sk"].ToString();
                ViewState["country_sk"] = Session["country_sk"].ToString();
                if (!IsPostBack)
                {
                    hdncountry.Value = Session["country_sk"].ToString();
                    ViewState["massage_partner_sk"] = Session["massage_partner_sk"].ToString();
                    ViewState["LoginSk"] = Session["mp_login_sk"].ToString();
                    ViewState["country_sk"] = Session["country_sk"].ToString();
                    if (Session["seeker_subscribed"] == null)
                        hdnpartnersubscribed.Value = "";
                    payment_fill();
                    button_type();
                    DataSet ds = objbusinessmpartener.get_messages(Convert.ToInt32(Session["massage_partner_sk"].ToString()));
                    ViewState["All_Data"] = ds;
                    //  ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "tmp1sd", "<script type='text/javascript'>openpopuppaypal();</script>", false);
                    // ScriptManager.GetCurrent(this).RegisterPostBackControl(Button1);
                }
                if (!Page.IsPostBack)
                {
                    if ((Request.QueryString["PayPal"] != null && Request.QueryString["PayPal"].ToString() == "Info2468Cubek"))
                    {
                        SavePromotion_AfterPaypal();
                        lblpaymentinfo.Style.Add("color", "green");
                        lblpaymentinfo.InnerHtml = "Annual Listing Payment Successful.";
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "script", "openOffersDialog();", true);
                        return;
                    }
                    else if ((Request.QueryString["PayPal"] != null && Request.QueryString["PayPal"].ToString() == "Cubek2468Tech"))
                    {
                        SavePromotion_AfterPaypal();
                        lblpaymentinfo.Style.Add("color", "green");
                        lblpaymentinfo.InnerHtml = "Annual Listing Payment Successful.";
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "script", "openOffersDialog();", true);
                        return;
                    }
                    else if ((Request.QueryString["PayPal"] != null && Request.QueryString["PayPal"].ToString() == "Sub_Cancel"))
                    {
                        //lblSuccess.InnerText = "Payment not done";
                        // lblSuccess.Style.Add("color", "red");
                        lblpaymentinfo.Style.Add("color", "red");
                        lblpaymentinfo.InnerHtml = "Annual Listing Payment Unsuccessful";
                        DataTable DT = new DataTable();
                        if (Session["seeker_subscribed"] != null && Session["seeker_subscribed"].ToString() != "")
                        {
                            DT = (DataTable)(Session["seeker_subscribed"]);
                            if (DT.Rows.Count > 0)
                            {
                                int service_provider_sk = Convert.ToInt32(DT.Rows[0]["massage_partner_sk"]);
                                int status = objmail.send_notification_mail_Provider_annual_sub(service_provider_sk);
                            }
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "script", "openOffersDialog();", true);
                            return;
                            //Session["Provider_subscription"] = null;
                        }
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "script", "openOffersDialog();", true);
                        return;

                    }
                }
            }
            else
            {
                lnklogin.Visible = true;
                lnkpayment.Visible = false;
                partner_sk.Value = "0";
                GetIP();
                fillDropdown();
                if (ViewState["selected_country_value"] != null)
                {
                    if (ViewState["selected_country_value"].ToString() != "100")
                    {
                        div_India_User.Visible = false;
                    }
                    else
                    {
                        div_India_User.Visible = true;
                    }
                }
            }

        }
        #region paymentGateway
        private void payment_fill()
        {
            DataSet ds = new DataSet();
            ds = objbusinessmpartener.getPartnerSubsciption(Convert.ToInt32(hdncountry.Value));
            //ds = objbusinessmpartener.getPartnerSubsciption(Convert.ToInt32("220"));


            if (ds.Tables[1].Rows.Count > 0)
            {
                ViewState["Seeker_subscrition_price"] = Math.Round(decimal.Parse(ds.Tables[1].Rows[0]["basic_unit_price"].ToString()), 2);
                //       ViewState["currency_short_name"] = ds.Tables[3].Rows[0]["currcountry_skency_short_name"];
                if (ds.Tables[1].Rows[0]["currency_short_name"].ToString() == "INR")
                {
                    price.InnerText = "Rs. " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), 0);



                    if (ConfigurationManager.AppSettings["Provider_subscription_default_year"].ToString() == "1")
                    {
                        price.InnerText = "Rs. " + " " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), 0);
                        checkboxOneYear_provider.Checked = true;
                        checkboxTwoYear_provider.Checked = false;
                        checkboxThreeYear_provider.Checked = false;
                        lblyearsub.InnerText = "1 Year";
                    }
                    else if (ConfigurationManager.AppSettings["Provider_subscription_default_year"].ToString() == "2")
                    {
                        price.InnerText = "Rs. " + " " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_india_2_year_per_partner"].ToString()));
                        checkboxOneYear_provider.Checked = false;
                        checkboxTwoYear_provider.Checked = true;
                        checkboxThreeYear_provider.Checked = false;
                        lblyearsub.InnerText = "2 Year";

                    }
                    else if (ConfigurationManager.AppSettings["Provider_subscription_default_year"].ToString() == "3")
                    {
                        price.InnerText = "Rs. " + " " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_india_3_year_per_partner"].ToString()));
                        checkboxOneYear_provider.Checked = false;
                        checkboxTwoYear_provider.Checked = false;
                        checkboxThreeYear_provider.Checked = true;
                        lblyearsub.InnerText = "3 Year";

                    }



                    ViewState["currency_short_name"] = ds.Tables[1].Rows[0]["currency_short_name"];
                    checkboxOneYear_provider.Text = "Rs. " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), 0);
                    checkboxTwoYear_provider.Text = "Rs. " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_india_2_year_per_partner"].ToString()));
                    checkboxThreeYear_provider.Text = "Rs. " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_india_3_year_per_partner"].ToString()));
                    price.InnerText = price.InnerText.Replace(".00", "");
                }
                else
                {
                    ViewState["currency_short_name"] = "USD";
                    price.InnerText = "USD" + " " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), 0);

                    if (ConfigurationManager.AppSettings["Provider_subscription_default_year"].ToString() == "1")
                    {
                        price.InnerText = "USD" + " " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), 0);
                        checkboxOneYear_provider.Checked = true;
                        checkboxTwoYear_provider.Checked = false;
                        checkboxThreeYear_provider.Checked = false;
                        lblyearsub.InnerText = "1 Year";
                    }
                    else if (ConfigurationManager.AppSettings["Provider_subscription_default_year"].ToString() == "2")
                    {
                        price.InnerText = "USD" + " " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_foreign_2_year_per_partner"].ToString()));
                        checkboxOneYear_provider.Checked = false;
                        checkboxTwoYear_provider.Checked = true;
                        checkboxThreeYear_provider.Checked = false;
                        lblyearsub.InnerText = "2 Year";

                    }
                    else if (ConfigurationManager.AppSettings["Provider_subscription_default_year"].ToString() == "3")
                    {
                        price.InnerText = "USD" + " " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_foreign_3_year_per_partner"].ToString()));
                        checkboxOneYear_provider.Checked = false;
                        checkboxTwoYear_provider.Checked = false;
                        checkboxThreeYear_provider.Checked = true;
                        lblyearsub.InnerText = "3 Year";

                    }


                    checkboxOneYear_provider.Text = "USD" + " " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), 0);
                    checkboxTwoYear_provider.Text = "USD" + " " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_foreign_2_year_per_partner"].ToString()));
                    checkboxThreeYear_provider.Text = "USD" + " " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_foreign_3_year_per_partner"].ToString()));
                    price.InnerText = price.InnerText.Replace(".00", "");
                }
            }
            else
            {
                if (ds.Tables[2].Rows.Count > 0)
                {

                    string price1 = Get_Listing_Price(ds.Tables[2].Rows[0]["basic_unit_price"].ToString(), 0);

                    price.InnerText = "USD " + price1;

                    // price.InnerText = "USD " + ds.Tables[2].Rows[0]["basic_unit_price"].ToString();
                    ViewState["currency_short_name"] = "USD";

                    if (ConfigurationManager.AppSettings["Provider_subscription_default_year"].ToString() == "1")
                    {
                        price.InnerText = "USD" + " " + Get_Listing_Price(ds.Tables[2].Rows[0]["basic_unit_price"].ToString(), 0);
                        checkboxOneYear_provider.Checked = true;
                        checkboxTwoYear_provider.Checked = false;
                        checkboxThreeYear_provider.Checked = false;
                        lblyearsub.InnerText = "1 Year";
                        ViewState["Seeker_subscrition_price"] = Get_Listing_Price(ds.Tables[2].Rows[0]["basic_unit_price"].ToString(), 0);

                    }
                    else if (ConfigurationManager.AppSettings["Provider_subscription_default_year"].ToString() == "2")
                    {
                        price.InnerText = "USD" + " " + Get_Listing_Price(ds.Tables[2].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_foreign_2_year_per_partner"].ToString()));
                        checkboxOneYear_provider.Checked = false;
                        checkboxTwoYear_provider.Checked = true;
                        checkboxThreeYear_provider.Checked = false;
                        lblyearsub.InnerText = "2 Year";
                        ViewState["Seeker_subscrition_price"] = Get_Listing_Price(ds.Tables[2].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_foreign_2_year_per_partner"].ToString()));


                    }
                    else if (ConfigurationManager.AppSettings["Provider_subscription_default_year"].ToString() == "3")
                    {
                        price.InnerText = "USD" + " " + Get_Listing_Price(ds.Tables[2].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_foreign_3_year_per_partner"].ToString()));
                        checkboxOneYear_provider.Checked = false;
                        checkboxTwoYear_provider.Checked = false;
                        checkboxThreeYear_provider.Checked = true;
                        lblyearsub.InnerText = "3 Year";
                        ViewState["Seeker_subscrition_price"] = Get_Listing_Price(ds.Tables[2].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_foreign_3_year_per_partner"].ToString()));

                    }




                    checkboxOneYear_provider.Text = "USD" + " " + Get_Listing_Price(ds.Tables[2].Rows[0]["basic_unit_price"].ToString(), 0);
                    checkboxTwoYear_provider.Text = "USD" + " " + Get_Listing_Price(ds.Tables[2].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_foreign_2_year_per_partner"].ToString()));
                    checkboxThreeYear_provider.Text = "USD" + " " + Get_Listing_Price(ds.Tables[2].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_foreign_3_year_per_partner"].ToString()));
                    price.InnerText = price.InnerText.Replace(".00", "");
                }
            }

            checkboxOneYear_provider.Text = checkboxOneYear_provider.Text.Replace(".00", "");
            checkboxTwoYear_provider.Text = checkboxTwoYear_provider.Text.Replace(".00", "");
            checkboxThreeYear_provider.Text = checkboxThreeYear_provider.Text.Replace(".00", "");

        }
        private void button_type()
        {
            DataSet dsButtonType = new DataSet();
            dsButtonType = objRegistrationBusiness.getPaymentButton_type();

            if (dsButtonType.Tables.Count > 0)
            {
                //   For indian customer
                if (hdncountry.Value == "100")
                {
                    if (dsButtonType.Tables.Count > 0)
                    {
                        if ((dsButtonType.Tables[1].Rows[0]["parameter_value"].ToString()).Trim() == "M")   // Check for Indian payment gatway M- MultiPaymentGateway
                        {

                            divpaypalccavanue_1.Visible = true; // cavanue payment gatway
                            btnPayNow.Visible = false; // Paypal payment gatway                                          
                            divpaypalStripe_1.Visible = false;


                        }  //  for single payment gatway selection
                        else if ((dsButtonType.Tables[3].Rows[0]["parameter_value"].ToString()).Trim() == "P")   // Check for Indian payment gatway P-Paypal Directly, M- MultiPaymentGateway
                        {
                            divpaypalccavanue_1.Visible = false; // cavanue payment gatway
                            btnPayNow.Visible = true;  // Paypal payment gatway
                            divpaypalStripe_1.Visible = false; // stripe payment gatway
                        }
                        else
                        {

                            divpaypalccavanue_1.Visible = false; // cavanue payment gatway
                            btnPayNow.Visible = false;  // Paypal payment gatway

                            divpaypalStripe_1.Visible = true; // stripe payment gatway
                        }
                    }
                }
                else
                {
                    // For International Customer
                    if ((dsButtonType.Tables[2].Rows[0]["parameter_value"].ToString()).Trim() == "P")   // Check for global payment gatway P->Paypal, S->Stripe
                    {   // Case for International PAYPAL case

                        divpaypalccavanue_1.Visible = false; // cavanue payment gatway
                        btnPayNow.Visible = true; // Paypal payment gatway

                        divpaypalStripe_1.Visible = false; // stripe payment gatway

                    }
                    else
                    {

                        // Case for International Stripe case

                        divpaypalccavanue_1.Visible = false;
                        btnPayNow.Visible = false;

                        divpaypalStripe_1.Visible = true;
                    }


                }
            }
        }
        protected string Get_Listing_Price(string payment, decimal for_year)
        {


            string amount = "00";
            if (Convert.ToDouble(payment) > 100)
            {
                amount = (Math.Round(Convert.ToDouble(Convert.ToDecimal(payment) + (Convert.ToDecimal(payment) * for_year)) / 100d, 0) * 100).ToString("000.00");
            }
            else
            {
                amount = (Math.Round(Convert.ToDouble(Convert.ToDecimal(payment) + (Convert.ToDecimal(payment) * for_year)) / 10d, 1) * 10).ToString("00.00");

            }

            return amount;
        }
        protected void SavePromotion_AfterPaypal()
        {
            ///
            if (Session["seeker_subscribed"] != null)
            {

                DataTable dt = new DataTable();
                DataColumn dc;
                dc = new DataColumn("massage_partner_sk");
                dc.DataType = System.Type.GetType("System.Int32");
                dt.Columns.Add(dc);


                dc = new DataColumn("country_sk");
                dc.DataType = System.Type.GetType("System.Int32");
                dt.Columns.Add(dc);

                dc = new DataColumn("subscription_start_date");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dc = new DataColumn("subscription_end_date");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);


                dc = new DataColumn("one_time_price");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dc = new DataColumn("is_subscribed");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);
                // dt = (DataTable)(Session["ServiceProvider_subscription"]);


                dc = new DataColumn("is_paid");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);


                dc = new DataColumn("PaymentGateway");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);


                dt = (DataTable)(Session["seeker_subscribed"]);
                dt.Rows[0]["is_subscribed"] = "Y";
                dt.Rows[0]["is_paid"] = "Y";
                dt.Rows[0]["PaymentGateway"] = "Paypal";
                objbusinessmpartener.InsertmassagePartnerSubscriptionDetails(dt);
                //  lblSuccess.InnerText = "Information saved successfully";
                // lblSuccess.Style.Add("color", "green");
                //  Session["ServiceProvider_subscription"] = null;
                Session["seeker_subscribed"] = "Y";
                lblpaymentinfo.InnerText = "Membership Payment Successfull!";
                ScriptManager.RegisterStartupScript(this, this.GetType(), "haritscript123", "openOffersDialog();", true);
                return;
                // Session["exists_promotion"] = "PromotionExists";
                //  ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "tmp23", "<script type='text/javascript'>fun_noData_popup('Promotion Successfully Paid, Now upload promotion.');</script>", false);

            }
            else
            {
                // lblSuccess.InnerText = "Payment not done";
                //  lblSuccess.Style.Add("color", "red");
                Session["seeker_subscribed"] = null;

            }
        }

        protected void SavePromotion_BeforePaypal()
        {
            ///
            if (Session["seeker_subscribed"] != null)
            {

                DataTable dt = new DataTable();
                DataColumn dc;
                dc = new DataColumn("massage_partner_sk");
                dc.DataType = System.Type.GetType("System.Int32");
                dt.Columns.Add(dc);


                dc = new DataColumn("country_sk");
                dc.DataType = System.Type.GetType("System.Int32");
                dt.Columns.Add(dc);

                dc = new DataColumn("subscription_start_date");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dc = new DataColumn("subscription_end_date");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);


                dc = new DataColumn("one_time_price");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dc = new DataColumn("is_subscribed");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);
                //  dt = (DataTable)(Session["ServiceProvider_subscription"]);


                dc = new DataColumn("is_paid");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dc = new DataColumn("PaymentGateway");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);



                dt = (DataTable)(Session["seeker_subscribed"]);
                dt.Rows[0]["is_subscribed"] = "N";
                dt.Rows[0]["is_paid"] = "N";
                dt.Rows[0]["PaymentGateway"] = "";



                objbusinessmpartener.InsertmassagePartnerSubscriptionDetails(dt);
                //lblSuccess.InnerText = "Information saved successfully";
                //lblSuccess.Style.Add("color", "green");
                //  Session["ServiceProvider_subscription"] = null;
                ScriptManager.RegisterStartupScript(this, this.GetType(), "script", "openOffersDialog();", true);
                return;
                // Session["exists_promotion"] = "PromotionExists";
                //  ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "tmp23", "<script type='text/javascript'>fun_noData_popup('Promotion Successfully Paid, Now upload promotion.');</script>", false);

            }
            else
            {
                // lblSuccess.InnerText = "Payment not done";
                // lblSuccess.Style.Add("color", "red");
                Session["seeker_subscribed"] = null;

            }
        }
        protected void SubmitStripe_1_Click(object sender, EventArgs e)
        {
            //try
            {
                Utils.Mails mail = new Utils.Mails();
                mail.payNow_Click_Mail(Session["massage_partner_sk"].ToString(), Session["country_sk"].ToString());
                DataSet ddsgetSeekers = new DataSet();
                if (ViewState["currency_short_name"] != null)
                {
                    if (ViewState["currency_short_name"].ToString() == "USD")
                    {
                        ViewState["Seeker_subscrition_price"] = Math.Round(decimal.Parse(checkboxOneYear_provider.Checked ? ((checkboxOneYear_provider.Text.ToString()).Replace(ViewState["currency_short_name"].ToString(), "")).Trim() : checkboxTwoYear_provider.Checked ? ((checkboxTwoYear_provider.Text.ToString()).Replace(ViewState["currency_short_name"].ToString(), "")).Trim() : ((checkboxThreeYear_provider.Text.ToString()).Replace(ViewState["currency_short_name"].ToString(), "")).Trim()), 2);

                    }
                    else
                    {
                        ViewState["Seeker_subscrition_price"] = Math.Round(decimal.Parse(checkboxOneYear_provider.Checked ? ((checkboxOneYear_provider.Text.ToString()).Replace("Rs. ", "")).Trim() : checkboxTwoYear_provider.Checked ? ((checkboxTwoYear_provider.Text.ToString()).Replace("Rs. ", "")).Trim() : ((checkboxThreeYear_provider.Text.ToString()).Replace("Rs. ", "")).Trim()), 2);
                    }
                }
                //int login_sk = Convert.ToInt32(Session["mp_login_sk"].ToString());

                int i = 0;
                string Subscription_price = "0";

                int ProviderId = Convert.ToInt32(Session["massage_partner_sk"].ToString());
                ddsgetSeekers = objbusinessmpartener.get_partner_details(ProviderId);
                if (ViewState["massage_partner_sk"] != null && ViewState["LoginSk"] != null)
                {

                    DataTable dt = new DataTable();
                    DataColumn dc;
                    dc = new DataColumn("massage_partner_sk");
                    dc.DataType = System.Type.GetType("System.Int32");
                    dt.Columns.Add(dc);
                    dc = new DataColumn("country_sk");
                    dc.DataType = System.Type.GetType("System.Int32");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("subscription_start_date");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("subscription_end_date");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);


                    dc = new DataColumn("one_time_price");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("is_subscribed");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("is_paid");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("PaymentGateway");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    DateTime dsfrom = System.DateTime.Now;
                    DateTime dsto = dsfrom.AddYears(1);
                    if (checkboxOneYear_provider.Checked) { dsto = dsfrom.AddYears(1); }
                    else if (checkboxTwoYear_provider.Checked) { dsto = dsfrom.AddYears(2); }
                    else if (checkboxThreeYear_provider.Checked) { dsto = dsfrom.AddYears(3); }
                    else { dsto = dsfrom.AddYears(1); }

                    Subscription_price = ViewState["Seeker_subscrition_price"].ToString();
                    int country_sk = Convert.ToInt32(ViewState["country_sk"]);
                    // ViewState["currency_short_name"] = "USD";

                    // insert into payment bridge

                    DataSet ds = new DataSet();
                    ds = objBusinessLogin.Insert_payment_bridge(Convert.ToInt32(ProviderId), "sp", null, null, "Internet Banking");
                    if (ds.Tables.Count > 0)
                    {
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            if (ds.Tables[0].Rows[0]["payment_gateway_name"] != null)
                            {
                                if (ds.Tables[0].Rows[0]["payment_gateway_name"].ToString() == "CCAvenue")
                                {
                                    Session["ccAvanue"] = "Y";
                                }
                                else
                                {
                                    {
                                        Session["ccAvanue"] = null;
                                    }
                                }
                            }
                        }
                    }
                    dt.Rows.Add(ProviderId, country_sk, dsfrom, dsto, Subscription_price, "N", "N", "");
                    Session["seeker_subscribed"] = dt;
                    int login_sk = Convert.ToInt32(ViewState["LoginSk"]);
                    i = objmail.sendMail(login_sk, "Partner Pay Now Click event", "user (serice Provider sk= " + ProviderId + ") is clicked for paypal for registration subscription", null);
                }
                string replaced_str = "";
                string curr1 = "";
                string payable_amt = Subscription_price;
                int is_paypal = obj.is_paypal();

                if (is_paypal == 1)
                {
                    if (Subscription_price != "0.00")
                    {


                        if (payable_amt != "0.00")
                        {
                            int country_sk = 0;
                            string str = "";
                            if (ViewState["currency_short_name"] != null)
                            {
                                curr1 = Convert.ToString(ViewState["currency_short_name"]);
                            }
                            try
                            {

                                StripeCustomer current = GetCustomer();
                                int chargetotal = Convert.ToInt32(Double.Parse(payable_amt)) * 100;//Convert.ToInt32((3.33*Convert.ToInt32(days)*100));
                                var mycharge = new StripeChargeCreateOptions();
                                mycharge.AmountInCents = chargetotal;
                                mycharge.Currency = (Convert.ToString(ViewState["currency_short_name"]).Trim());
                                mycharge.CustomerId = current.Id;
                                string key = ConfigurationManager.AppSettings["StripeApiKey"].ToString();
                                var chargeservice = new StripeChargeService(key);
                                StripeCharge currentcharge = chargeservice.Create(mycharge);
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "script", "closeDialogPaypal('popuppaypal');", true);
                                SavePromotion_AfterPaypal();

                            }
                            catch (System.Exception ex)
                            {
                                lblmassage_1.Text = ex.Message;
                                lblmassage_1.Style.Add("color", "red");
                                return;
                                //   send.SendMail("info@massage2book.com", "support@massage2book.com", "Exception occured with webservice", ex.Message + " " + " On Subscription Page M2B, currency conversion api from  USD to '" + curr1 + "'", null);
                            }
                            //lbl_curr_2.Text = curr1;

                        }
                        else
                        {
                        }

                    }
                    else
                    {

                    }
                }
                else
                {

                }
            }


        }


        protected void paypal_Click(object sender, EventArgs e)
        {
            //try
            {
                Utils.Mails mail = new Utils.Mails();
                mail.payNow_Click_Mail(Session["massage_partner_sk"].ToString(), Session["country_sk"].ToString());
                DataSet ddsgetSeekers = new DataSet();
                if (ViewState["currency_short_name"] != null)
                {
                    if (ViewState["currency_short_name"].ToString() == "USD")
                    {
                        ViewState["Seeker_subscrition_price"] = Math.Round(decimal.Parse(checkboxOneYear_provider.Checked ? ((checkboxOneYear_provider.Text.ToString()).Replace(ViewState["currency_short_name"].ToString(), "")).Trim() : checkboxTwoYear_provider.Checked ? ((checkboxTwoYear_provider.Text.ToString()).Replace(ViewState["currency_short_name"].ToString(), "")).Trim() : ((checkboxThreeYear_provider.Text.ToString()).Replace(ViewState["currency_short_name"].ToString(), "")).Trim()), 2);
                    }
                    else
                    {
                        ViewState["Seeker_subscrition_price"] = Math.Round(decimal.Parse(checkboxOneYear_provider.Checked ? ((checkboxOneYear_provider.Text.ToString()).Replace("Rs. ", "")).Trim() : checkboxTwoYear_provider.Checked ? ((checkboxTwoYear_provider.Text.ToString()).Replace("Rs. ", "")).Trim() : ((checkboxThreeYear_provider.Text.ToString()).Replace("Rs. ", "")).Trim()), 2);
                    }
                }
                int i = 0;
                string Subscription_price = "0";
                int ProviderId = Convert.ToInt32(ViewState["massage_partner_sk"]);
                ddsgetSeekers = objbusinessmpartener.get_partner_details(ProviderId);
                if (ViewState["massage_partner_sk"] != null && ViewState["LoginSk"] != null)
                {
                    DataTable dt = new DataTable();
                    DataColumn dc;
                    dc = new DataColumn("massage_partner_sk");
                    dc.DataType = System.Type.GetType("System.Int32");
                    dt.Columns.Add(dc);
                    dc = new DataColumn("country_sk");
                    dc.DataType = System.Type.GetType("System.Int32");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("subscription_start_date");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("subscription_end_date");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);


                    dc = new DataColumn("one_time_price");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("is_subscribed");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("is_paid");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);


                    dc = new DataColumn("PaymentGateway");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    DateTime dsfrom = System.DateTime.Now;
                    DateTime dsto = dsfrom.AddYears(1);
                    if (checkboxOneYear_provider.Checked) { dsto = dsfrom.AddYears(1); }
                    else if (checkboxTwoYear_provider.Checked) { dsto = dsfrom.AddYears(2); }
                    else if (checkboxThreeYear_provider.Checked) { dsto = dsfrom.AddYears(3); }
                    else { dsto = dsfrom.AddYears(1); }

                    Subscription_price = ViewState["Seeker_subscrition_price"].ToString();
                    int country_sk = Convert.ToInt32(ViewState["country_sk"]);
                    // ViewState["currency_short_name"] = "USD";

                    ////   insertion for payment bridge
                    DataSet ds = new DataSet();
                    int? Banksk = null;
                    int? cardsk = null;
                    ds = objBusinessLogin.Insert_payment_bridge(Convert.ToInt32(ProviderId), "sp", Banksk, cardsk, "");
                    ////   insertion for payment bridge
                    if (ds.Tables.Count > 0)
                    {
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            if (ds.Tables[0].Rows[0]["payment_gateway_name"] != null)
                            {
                                if (ds.Tables[0].Rows[0]["payment_gateway_name"].ToString() == "CCAvenue")
                                {
                                    Session["ccAvanue"] = "Y";
                                }
                                else
                                {
                                    {
                                        Session["ccAvanue"] = null;
                                    }
                                }
                            }
                        }
                    }
                    dt.Rows.Add(ProviderId, country_sk, dsfrom, dsto, Subscription_price, "N", "N", "");
                    Session["seeker_subscribed"] = dt;
                    int login_sk = Convert.ToInt32(ViewState["LoginSk"]);
                    i = objmail.sendMail(login_sk, "Partner Pay Now Click event", "user (serice Provider sk= " + ProviderId + ") is clicked for paypal for registration subscription", null);
                }
                string replaced_str = "";
                string curr1 = "";
                string payable_amt = Subscription_price;
                int is_paypal = obj.is_paypal();

                if (is_paypal == 1)
                {
                    if (Subscription_price != "0.00")
                    {


                        if (payable_amt != "0.00")
                        {
                            int country_sk = 0;
                            string str = "";
                            if (ViewState["currency_short_name"] != null)
                            {
                                curr1 = Convert.ToString(ViewState["currency_short_name"]);
                            }
                            try
                            {
                                if (ViewState["country_sk"] != null)
                                    country_sk = Convert.ToInt32(ViewState["country_sk"]);

                                ReadWriteWebservice objs = new ReadWriteWebservice();
                                if (Convert.ToString(ViewState["currency_short_name"]) == "USD")
                                {
                                    str = objs.CurrencyConversion(payable_amt, "USD", "USD");
                                }
                                else
                                {
                                    str = objs.CurrencyConversion(payable_amt, ViewState["currency_short_name"].ToString(), "USD");
                                }
                                str = str.Normalize();
                                replaced_str = str.Replace(" USD", "");
                                if (replaced_str != "" && replaced_str != null)
                                {
                                    string str_amt_2 = objs.CurrencyConversion(replaced_str, "USD", curr1);
                                }
                            }
                            catch (System.Exception ex)
                            {
                                BussinessEntity.ExceptionHandling.ErrorMessage = ex.Message;
                                Business.BussinessSendMail send = new BussinessSendMail();
                                //   send.SendMail("info@massage2book.com", "support@massage2book.com", "Exception occured with webservice", ex.Message + " " + " On Subscription Page M2B, currency conversion api from  USD to '" + curr1 + "'", null);
                            }
                            //lbl_curr_2.Text = curr1;
                            Session["Converted_Doller_amount"] = replaced_str;


                            SavePromotion_BeforePaypal();
                            //save with paypal    
                            SubmitToPaypal(replaced_str);
                            //  SavePromotion();
                        }
                        else
                        { }

                    }
                    else
                    {

                    }
                }

            }
            //catch (System.Exception ex)
            //{
            //    BussinessEntity.ExceptionHandling.ErrorMessage = ex.Message;
            //    var st = new System.Diagnostics.StackTrace(ex, true);
            //    StackFrame[] stackFrames = st.GetFrames();
            //    foreach (StackFrame stackFrame in stackFrames)
            //    {
            //        Console.WriteLine(stackFrame.GetMethod().Name);   // write method name
            //        BussinessEntity.ExceptionHandling._lineno = stackFrame.GetFileLineNumber();
            //        BussinessEntity.ExceptionHandling._methodname = Convert.ToString(stackFrame.GetMethod().Name);
            //        BussinessEntity.ExceptionHandling._pagename = Convert.ToString(Request.Url.AbsoluteUri);

            //    }

            //    Response.Redirect(Constants__.WEB_ROOT + "/ErrorMessage.aspx", false);
            //}
        }



        protected void paypal_Click_CCAVANUE_Netbanking(object sender, EventArgs e)
        {
            //try
            {
                DataSet ddsgetSeekers = new DataSet();
                if (ViewState["currency_short_name"] != null)
                {
                    if (ViewState["currency_short_name"].ToString() == "USD")
                    {
                        ViewState["Seeker_subscrition_price"] = Math.Round(decimal.Parse(checkboxOneYear_provider.Checked ? ((checkboxOneYear_provider.Text.ToString()).Replace(ViewState["currency_short_name"].ToString(), "")).Trim() : checkboxTwoYear_provider.Checked ? ((checkboxTwoYear_provider.Text.ToString()).Replace(ViewState["currency_short_name"].ToString(), "")).Trim() : ((checkboxThreeYear_provider.Text.ToString()).Replace(ViewState["currency_short_name"].ToString(), "")).Trim()), 2);

                    }
                    else
                    {
                        ViewState["Seeker_subscrition_price"] = Math.Round(decimal.Parse(checkboxOneYear_provider.Checked ? ((checkboxOneYear_provider.Text.ToString()).Replace("Rs. ", "")).Trim() : checkboxTwoYear_provider.Checked ? ((checkboxTwoYear_provider.Text.ToString()).Replace("Rs. ", "")).Trim() : ((checkboxThreeYear_provider.Text.ToString()).Replace("Rs. ", "")).Trim()), 2);
                    }
                }
                //int login_sk = Convert.ToInt32(Session["mp_login_sk"].ToString());

                int i = 0;
                string Subscription_price = "0";

                int ProviderId = Convert.ToInt32(ViewState["massage_partner_sk"]);
                ddsgetSeekers = objbusinessmpartener.get_partner_details(ProviderId);
                if (ViewState["massage_partner_sk"] != null && ViewState["LoginSk"] != null)
                {

                    DataTable dt = new DataTable();
                    DataColumn dc;
                    dc = new DataColumn("massage_partner_sk");
                    dc.DataType = System.Type.GetType("System.Int32");
                    dt.Columns.Add(dc);
                    dc = new DataColumn("country_sk");
                    dc.DataType = System.Type.GetType("System.Int32");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("subscription_start_date");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("subscription_end_date");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);


                    dc = new DataColumn("one_time_price");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("is_subscribed");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("is_paid");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("PaymentGateway");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    DateTime dsfrom = System.DateTime.Now;
                    DateTime dsto = dsfrom.AddYears(1);
                    if (checkboxOneYear_provider.Checked) { dsto = dsfrom.AddYears(1); }
                    else if (checkboxTwoYear_provider.Checked) { dsto = dsfrom.AddYears(2); }
                    else if (checkboxThreeYear_provider.Checked) { dsto = dsfrom.AddYears(3); }
                    else { dsto = dsfrom.AddYears(1); }

                    Subscription_price = ViewState["Seeker_subscrition_price"].ToString();
                    int country_sk = Convert.ToInt32(ViewState["country_sk"]);
                    // ViewState["currency_short_name"] = "USD";

                    // insert into payment bridge

                    DataSet ds = new DataSet();
                    ds = objBusinessLogin.Insert_payment_bridge(Convert.ToInt32(ProviderId), "sp", null, null, "Internet Banking");
                    if (ds.Tables.Count > 0)
                    {
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            if (ds.Tables[0].Rows[0]["payment_gateway_name"] != null)
                            {
                                if (ds.Tables[0].Rows[0]["payment_gateway_name"].ToString() == "CCAvenue")
                                {
                                    Session["ccAvanue"] = "Y";
                                }
                                else
                                {
                                    {
                                        Session["ccAvanue"] = null;
                                    }
                                }
                            }
                        }
                    }
                    dt.Rows.Add(ProviderId, country_sk, dsfrom, dsto, Subscription_price, "N", "N", "");
                    Session["seeker_subscribed"] = dt;
                    int login_sk = Convert.ToInt32(ViewState["LoginSk"]);
                    i = objmail.sendMail(login_sk, "Partner Pay Now Click event", "user (serice Provider sk= " + ProviderId + ") is clicked for paypal for registration subscription", null);
                }
                string replaced_str = "";
                string curr1 = "";
                string payable_amt = Subscription_price;
                int is_paypal = obj.is_paypal();

                if (is_paypal == 1)
                {
                    if (Subscription_price != "0.00")
                    {


                        if (payable_amt != "0.00")
                        {
                            int country_sk = 0;
                            string str = "";
                            if (ViewState["currency_short_name"] != null)
                            {
                                curr1 = Convert.ToString(ViewState["currency_short_name"]);
                            }
                            try
                            {
                                if (ViewState["country_sk"] != null)
                                    country_sk = Convert.ToInt32(ViewState["country_sk"]);

                                ReadWriteWebservice objs = new ReadWriteWebservice();
                                if (Convert.ToString(ViewState["currency_short_name"]) == "USD")
                                {
                                    str = objs.CurrencyConversion(payable_amt, "USD", "USD");
                                }
                                else if (Convert.ToString(ViewState["currency_short_name"]) == "INR" && Session["ccAvanue"] == "Y")
                                {
                                    SavePromotion_BeforePaypal();
                                    Go_for_payment(ddsgetSeekers, payable_amt); Session["ccAvanue"] = null;
                                    return;
                                }
                                else
                                {
                                    str = objs.CurrencyConversion(payable_amt, ViewState["currency_short_name"].ToString(), "USD");
                                }
                                str = str.Normalize();
                                replaced_str = str.Replace(" USD", "");
                                if (replaced_str != "" && replaced_str != null)
                                {
                                    string str_amt_2 = objs.CurrencyConversion(replaced_str, "USD", curr1);
                                }
                            }
                            catch (System.Exception ex)
                            {
                                BussinessEntity.ExceptionHandling.ErrorMessage = ex.Message;
                                Business.BussinessSendMail send = new BussinessSendMail();
                                //   send.SendMail("info@massage2book.com", "support@massage2book.com", "Exception occured with webservice", ex.Message + " " + " On Subscription Page M2B, currency conversion api from  USD to '" + curr1 + "'", null);
                            }
                            //lbl_curr_2.Text = curr1;
                            Session["Converted_Doller_amount"] = replaced_str;


                            SavePromotion_BeforePaypal();
                            //save with paypal    
                            SubmitToPaypal(replaced_str);
                            //  SavePromotion();
                        }
                        else
                        {
                        }

                    }
                    else
                    {

                    }
                }
                else
                {

                }
            }


        }

        protected void paypal_Click_CCAVANUE_OtherPayment(object sender, EventArgs e)
        {
            //try
            {
                DataSet ddsgetSeekers = new DataSet();
                if (ViewState["currency_short_name"] != null)
                {
                    if (ViewState["currency_short_name"].ToString() == "USD")
                    {
                        ViewState["Seeker_subscrition_price"] = Math.Round(decimal.Parse(checkboxOneYear_provider.Checked ? ((checkboxOneYear_provider.Text.ToString()).Replace(ViewState["currency_short_name"].ToString(), "")).Trim() : checkboxTwoYear_provider.Checked ? ((checkboxTwoYear_provider.Text.ToString()).Replace(ViewState["currency_short_name"].ToString(), "")).Trim() : ((checkboxThreeYear_provider.Text.ToString()).Replace(ViewState["currency_short_name"].ToString(), "")).Trim()), 2);

                    }
                    else
                    {
                        ViewState["Seeker_subscrition_price"] = Math.Round(decimal.Parse(checkboxOneYear_provider.Checked ? ((checkboxOneYear_provider.Text.ToString()).Replace("Rs. ", "")).Trim() : checkboxTwoYear_provider.Checked ? ((checkboxTwoYear_provider.Text.ToString()).Replace("Rs. ", "")).Trim() : ((checkboxThreeYear_provider.Text.ToString()).Replace("Rs. ", "")).Trim()), 2);
                    }
                }
                //int login_sk = Convert.ToInt32(Session["mp_login_sk"].ToString());

                int i = 0;
                string Subscription_price = "0";

                int ProviderId = Convert.ToInt32(ViewState["massage_partner_sk"]);
                ddsgetSeekers = objbusinessmpartener.get_partner_details(ProviderId);
                if (ViewState["massage_partner_sk"] != null && ViewState["LoginSk"] != null)
                {

                    DataTable dt = new DataTable();
                    DataColumn dc;
                    dc = new DataColumn("massage_partner_sk");
                    dc.DataType = System.Type.GetType("System.Int32");
                    dt.Columns.Add(dc);
                    dc = new DataColumn("country_sk");
                    dc.DataType = System.Type.GetType("System.Int32");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("subscription_start_date");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("subscription_end_date");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);


                    dc = new DataColumn("one_time_price");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("is_subscribed");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("is_paid");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("PaymentGateway");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    DateTime dsfrom = System.DateTime.Now;
                    DateTime dsto = dsfrom.AddYears(1);
                    if (checkboxOneYear_provider.Checked) { dsto = dsfrom.AddYears(1); }
                    else if (checkboxTwoYear_provider.Checked) { dsto = dsfrom.AddYears(2); }
                    else if (checkboxThreeYear_provider.Checked) { dsto = dsfrom.AddYears(3); }
                    else { dsto = dsfrom.AddYears(1); }

                    Subscription_price = ViewState["Seeker_subscrition_price"].ToString();
                    int country_sk = Convert.ToInt32(ViewState["country_sk"]);
                    // ViewState["currency_short_name"] = "USD";

                    // insert into payment bridge

                    DataSet ds = new DataSet();
                    ds = objBusinessLogin.Insert_payment_bridge(Convert.ToInt32(ProviderId), "sp", null, null, "Other Payment Methods");

                    if (ds.Tables.Count > 0)
                    {
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            if (ds.Tables[0].Rows[0]["payment_gateway_name"] != null)
                            {
                                if (ds.Tables[0].Rows[0]["payment_gateway_name"].ToString() == "CCAvenue")
                                {
                                    Session["ccAvanue"] = "Y";
                                }
                                else
                                {
                                    {
                                        Session["ccAvanue"] = null;
                                    }
                                }
                            }
                        }
                    }


                    dt.Rows.Add(ProviderId, country_sk, dsfrom, dsto, Subscription_price, "N", "N", "");
                    Session["seeker_subscribed"] = dt;
                    int login_sk = Convert.ToInt32(ViewState["LoginSk"]);
                    i = objmail.sendMail(login_sk, "Partner Pay Now Click event", "user (serice Provider sk= " + ProviderId + ") is clicked for paypal for registration subscription", null);
                }
                string replaced_str = "";
                string curr1 = "";
                string payable_amt = Subscription_price;
                int is_paypal = obj.is_paypal();

                if (is_paypal == 1)
                {
                    if (Subscription_price != "0.00")
                    {


                        if (payable_amt != "0.00")
                        {
                            int country_sk = 0;
                            string str = "";
                            if (ViewState["currency_short_name"] != null)
                            {
                                curr1 = Convert.ToString(ViewState["currency_short_name"]);
                            }
                            try
                            {
                                if (ViewState["country_sk"] != null)
                                    country_sk = Convert.ToInt32(ViewState["country_sk"]);

                                ReadWriteWebservice objs = new ReadWriteWebservice();
                                if (Convert.ToString(ViewState["currency_short_name"]) == "USD")
                                {
                                    str = objs.CurrencyConversion(payable_amt, "USD", "USD");
                                }
                                else if (Convert.ToString(ViewState["currency_short_name"]) == "INR" && Session["ccAvanue"] == "Y")
                                {
                                    SavePromotion_BeforePaypal();
                                    Go_for_payment(ddsgetSeekers, payable_amt); Session["ccAvanue"] = null;
                                    return;
                                }
                                else
                                {
                                    str = objs.CurrencyConversion(payable_amt, ViewState["currency_short_name"].ToString(), "USD");
                                }
                                str = str.Normalize();
                                replaced_str = str.Replace(" USD", "");
                                if (replaced_str != "" && replaced_str != null)
                                {
                                    string str_amt_2 = objs.CurrencyConversion(replaced_str, "USD", curr1);
                                }
                            }
                            catch (System.Exception ex)
                            {
                                BussinessEntity.ExceptionHandling.ErrorMessage = ex.Message;
                                Business.BussinessSendMail send = new BussinessSendMail();
                                //   send.SendMail("info@massage2book.com", "support@massage2book.com", "Exception occured with webservice", ex.Message + " " + " On Subscription Page M2B, currency conversion api from  USD to '" + curr1 + "'", null);
                            }
                            //lbl_curr_2.Text = curr1;
                            Session["Converted_Doller_amount"] = replaced_str;


                            SavePromotion_BeforePaypal();
                            //save with paypal    
                            SubmitToPaypal(replaced_str);
                            //  SavePromotion();
                        }
                        else
                        {
                        }

                    }
                    else
                    {

                    }
                }
                else
                {

                }
            }


        }




        private StripeCustomer GetCustomer()
        {
            var mycust = new StripeCustomerCreateOptions();
            mycust.Email = "";
            mycust.Description = "";
            mycust.CardNumber = txtCardNumber_1.Text.Trim();
            mycust.CardExpirationMonth = txtCardExpirationMonth_1.Text.Trim();
            mycust.CardExpirationYear = txtCardExpirationYear_1.Text.Trim();
            // mycust.PlanId = "100";
            mycust.CardName = txtCardName_1.Text.Trim();
            mycust.CardAddressCity = "";
            mycust.CardAddressCountry = "";
            mycust.CardAddressLine1 = "";
            //mycust.TrialEnd = getrialend();
            ServicePointManager.SecurityProtocol = (SecurityProtocolType)3072;

            var customerservice = new StripeCustomerService(ConfigurationManager.AppSettings["StripeApiKey"].ToString());
            return customerservice.Create(mycust);
        }

        protected void DebitCard_Payment_Click(object sender, EventArgs e)
        {
            //try
            {

                lblddlDebitCartTypes.Text = lblddlDebitCartBankNames.Text = "";

                if (ddlDebitCartTypes.SelectedValue == "0" || ddlDebitCartBankNames.SelectedValue == "0")
                {
                    if (ddlDebitCartTypes.SelectedValue == "0")
                    {
                        lblddlDebitCartTypes.Text = "Select Card Type";
                    }

                    if (ddlDebitCartBankNames.SelectedValue == "0")
                    {
                        lblddlDebitCartBankNames.Text = "Select Bank Name";
                    }

                    return;
                }



                DataSet ddsgetSeekers = new DataSet();
                if (ViewState["currency_short_name"] != null)
                {
                    if (ViewState["currency_short_name"].ToString() == "USD")
                    {
                        ViewState["Seeker_subscrition_price"] = Math.Round(decimal.Parse(checkboxOneYear_provider.Checked ? ((checkboxOneYear_provider.Text.ToString()).Replace(ViewState["currency_short_name"].ToString(), "")).Trim() : checkboxTwoYear_provider.Checked ? ((checkboxTwoYear_provider.Text.ToString()).Replace(ViewState["currency_short_name"].ToString(), "")).Trim() : ((checkboxThreeYear_provider.Text.ToString()).Replace(ViewState["currency_short_name"].ToString(), "")).Trim()), 2);

                    }
                    else
                    {
                        ViewState["Seeker_subscrition_price"] = Math.Round(decimal.Parse(checkboxOneYear_provider.Checked ? ((checkboxOneYear_provider.Text.ToString()).Replace("Rs. ", "")).Trim() : checkboxTwoYear_provider.Checked ? ((checkboxTwoYear_provider.Text.ToString()).Replace("Rs. ", "")).Trim() : ((checkboxThreeYear_provider.Text.ToString()).Replace("Rs. ", "")).Trim()), 2);
                    }
                }
                //int login_sk = Convert.ToInt32(Session["mp_login_sk"].ToString());

                int i = 0;
                string Subscription_price = "0";

                int ProviderId = Convert.ToInt32(ViewState["massage_partner_sk"]);
                ddsgetSeekers = objbusinessmpartener.get_partner_details(ProviderId);
                if (ViewState["massage_partner_sk"] != null && ViewState["LoginSk"] != null)
                {

                    DataTable dt = new DataTable();
                    DataColumn dc;
                    dc = new DataColumn("massage_partner_sk");
                    dc.DataType = System.Type.GetType("System.Int32");
                    dt.Columns.Add(dc);
                    dc = new DataColumn("country_sk");
                    dc.DataType = System.Type.GetType("System.Int32");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("subscription_start_date");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("subscription_end_date");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);


                    dc = new DataColumn("one_time_price");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("is_subscribed");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("is_paid");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);


                    dc = new DataColumn("PaymentGateway");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    DateTime dsfrom = System.DateTime.Now;
                    DateTime dsto = dsfrom.AddYears(1);
                    if (checkboxOneYear_provider.Checked) { dsto = dsfrom.AddYears(1); }
                    else if (checkboxTwoYear_provider.Checked) { dsto = dsfrom.AddYears(2); }
                    else if (checkboxThreeYear_provider.Checked) { dsto = dsfrom.AddYears(3); }
                    else { dsto = dsfrom.AddYears(1); }

                    Subscription_price = ViewState["Seeker_subscrition_price"].ToString();
                    int country_sk = Convert.ToInt32(ViewState["country_sk"]);
                    // ViewState["currency_short_name"] = "USD";

                    // insert into payment bridge

                    DataSet dsbridge = new DataSet();

                    int Banksk = Convert.ToInt32(ddlDebitCartBankNames.SelectedValue);
                    int cardsk = Convert.ToInt32(ddlDebitCartTypes.SelectedValue);
                    dsbridge = objBusinessLogin.Insert_payment_bridge(Convert.ToInt32(ProviderId), "sp", cardsk, Banksk, "Debit Card");

                    if (dsbridge.Tables.Count > 0)
                    {
                        if (dsbridge.Tables[0].Rows.Count > 0)
                        {
                            if (dsbridge.Tables[0].Rows[0]["payment_gateway_name"] != null)
                            {
                                if (dsbridge.Tables[0].Rows[0]["payment_gateway_name"].ToString() == "CCAvenue")
                                {
                                    Session["ccAvanue"] = "Y";
                                }
                                else
                                {
                                    {
                                        Session["ccAvanue"] = null;
                                    }
                                }
                            }
                        }
                    }


                    dt.Rows.Add(ProviderId, country_sk, dsfrom, dsto, Subscription_price, "N", "N", "");
                    Session["seeker_subscribed"] = dt;
                    int login_sk = Convert.ToInt32(ViewState["LoginSk"]);
                    i = objmail.sendMail(login_sk, "Partner Pay Now Click event", "user (serice Provider sk= " + ProviderId + ") is clicked for paypal for registration subscription", null);
                }
                string replaced_str = "";
                string curr1 = "";
                string payable_amt = Subscription_price;
                int is_paypal = obj.is_paypal();

                if (is_paypal == 1)
                {
                    if (Subscription_price != "0.00")
                    {


                        if (payable_amt != "0.00")
                        {
                            int country_sk = 0;
                            string str = "";
                            if (ViewState["currency_short_name"] != null)
                            {
                                curr1 = Convert.ToString(ViewState["currency_short_name"]);
                            }
                            try
                            {
                                if (ViewState["country_sk"] != null)
                                    country_sk = Convert.ToInt32(ViewState["country_sk"]);

                                ReadWriteWebservice objs = new ReadWriteWebservice();
                                if (Convert.ToString(ViewState["currency_short_name"]) == "USD")
                                {
                                    str = objs.CurrencyConversion(payable_amt, "USD", "USD");
                                }
                                else if (Convert.ToString(ViewState["currency_short_name"]) == "INR")
                                {
                                    if (ddlDebitCartTypes.SelectedValue == "100" || ddlDebitCartBankNames.SelectedValue == "100" && Session["ccAvanue"] == "Y")
                                    {
                                        SavePromotion_BeforePaypal();
                                        Go_for_payment(ddsgetSeekers, payable_amt); Session["ccAvanue"] = null;
                                        return;
                                    }
                                    else
                                    {
                                        str = objs.CurrencyConversion(payable_amt, ViewState["currency_short_name"].ToString(), "USD");
                                    }
                                }
                                else
                                {
                                    str = objs.CurrencyConversion(payable_amt, ViewState["currency_short_name"].ToString(), "USD");
                                }
                                str = str.Normalize();
                                replaced_str = str.Replace(" USD", "");
                                if (replaced_str != "" && replaced_str != null)
                                {
                                    string str_amt_2 = objs.CurrencyConversion(replaced_str, "USD", curr1);
                                }
                            }
                            catch (System.Exception ex)
                            {
                                BussinessEntity.ExceptionHandling.ErrorMessage = ex.Message;
                                Business.BussinessSendMail send = new BussinessSendMail();
                                //   send.SendMail("info@massage2book.com", "support@massage2book.com", "Exception occured with webservice", ex.Message + " " + " On Subscription Page M2B, currency conversion api from  USD to '" + curr1 + "'", null);
                            }
                            //lbl_curr_2.Text = curr1;
                            Session["Converted_Doller_amount"] = replaced_str;


                            SavePromotion_BeforePaypal();
                            //save with paypal    
                            SubmitToPaypal(replaced_str);
                            //  SavePromotion();
                        }
                        else
                        {
                        }

                    }
                    else
                    {

                    }
                }
                else
                {

                }
            }

            //catch (System.Exception ex)
            //{
            //    BussinessEntity.ExceptionHandling.ErrorMessage = ex.Message;
            //    var st = new System.Diagnostics.StackTrace(ex, true);
            //    StackFrame[] stackFrames = st.GetFrames();
            //    foreach (StackFrame stackFrame in stackFrames)
            //    {
            //        Console.WriteLine(stackFrame.GetMethod().Name);   // write method name
            //        BussinessEntity.ExceptionHandling._lineno = stackFrame.GetFileLineNumber();
            //        BussinessEntity.ExceptionHandling._methodname = Convert.ToString(stackFrame.GetMethod().Name);
            //        BussinessEntity.ExceptionHandling._pagename = Convert.ToString(Request.Url.AbsoluteUri);

            //    }

            //    Response.Redirect(Constants__.WEB_ROOT + "/ErrorMessage.aspx", false);
            //}
        }

        protected void CreditCard_Payment_Click(object sender, EventArgs e)
        {
            //try
            {


                lblddlCreditCartTypes.Text = lblddlCreditCartBankNames.Text = "";

                if (ddlCreditCartTypes.SelectedValue == "0" || ddlCreditCartBankNames.SelectedValue == "0")
                {
                    if (ddlCreditCartTypes.SelectedValue == "0")
                    {
                        lblddlCreditCartTypes.Text = "Select Card Type";
                    }

                    if (ddlCreditCartBankNames.SelectedValue == "0")
                    {
                        lblddlCreditCartBankNames.Text = "Select Bank Name";
                    }

                    return;
                }


                DataSet ddsgetSeekers = new DataSet();
                if (ViewState["currency_short_name"] != null)
                {
                    if (ViewState["currency_short_name"].ToString() == "USD")
                    {
                        ViewState["Seeker_subscrition_price"] = Math.Round(decimal.Parse(checkboxOneYear_provider.Checked ? ((checkboxOneYear_provider.Text.ToString()).Replace(ViewState["currency_short_name"].ToString(), "")).Trim() : checkboxTwoYear_provider.Checked ? ((checkboxTwoYear_provider.Text.ToString()).Replace(ViewState["currency_short_name"].ToString(), "")).Trim() : ((checkboxThreeYear_provider.Text.ToString()).Replace(ViewState["currency_short_name"].ToString(), "")).Trim()), 2);

                    }
                    else
                    {
                        ViewState["Seeker_subscrition_price"] =
                            Math.Round(decimal.Parse(checkboxOneYear_provider.Checked ?
                            ((checkboxOneYear_provider.Text.ToString()).Replace("Rs. ", "")).Trim() : checkboxTwoYear_provider.Checked ? ((checkboxTwoYear_provider.Text.ToString()).Replace("Rs. ", "")).Trim() : ((checkboxThreeYear_provider.Text.ToString()).Replace("Rs. ", "")).Trim()), 2);
                    }
                }
                //int login_sk = Convert.ToInt32(Session["mp_login_sk"].ToString());

                int i = 0;
                string Subscription_price = "0";

                int ProviderId = Convert.ToInt32(ViewState["massage_partner_sk"]);
                ddsgetSeekers = objbusinessmpartener.get_partner_details(ProviderId);
                if (ViewState["massage_partner_sk"] != null && ViewState["LoginSk"] != null)
                {





                    DataTable dt = new DataTable();
                    DataColumn dc;
                    dc = new DataColumn("massage_partner_sk");
                    dc.DataType = System.Type.GetType("System.Int32");
                    dt.Columns.Add(dc);
                    dc = new DataColumn("country_sk");
                    dc.DataType = System.Type.GetType("System.Int32");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("subscription_start_date");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("subscription_end_date");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);


                    dc = new DataColumn("one_time_price");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("is_subscribed");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);

                    dc = new DataColumn("is_paid");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);


                    dc = new DataColumn("PaymentGateway");
                    dc.DataType = System.Type.GetType("System.String");
                    dt.Columns.Add(dc);


                    DateTime dsfrom = System.DateTime.Now;
                    DateTime dsto = dsfrom.AddYears(1);
                    if (checkboxOneYear_provider.Checked) { dsto = dsfrom.AddYears(1); }
                    else if (checkboxTwoYear_provider.Checked) { dsto = dsfrom.AddYears(2); }
                    else if (checkboxThreeYear_provider.Checked) { dsto = dsfrom.AddYears(3); }
                    else { dsto = dsfrom.AddYears(1); }

                    Subscription_price = ViewState["Seeker_subscrition_price"].ToString();
                    int country_sk = Convert.ToInt32(ViewState["country_sk"]);
                    // ViewState["currency_short_name"] = "USD";

                    // insert into payment bridge
                    DataSet dsbridge = new DataSet();
                    int Banksk = Convert.ToInt32(ddlCreditCartBankNames.SelectedValue);
                    int cardsk = Convert.ToInt32(ddlCreditCartTypes.SelectedValue);
                    dsbridge = objBusinessLogin.Insert_payment_bridge(Convert.ToInt32(ProviderId), "sp", cardsk, Banksk, "Credit Card");
                    if (dsbridge.Tables.Count > 0)
                    {
                        if (dsbridge.Tables[0].Rows.Count > 0)
                        {
                            if (dsbridge.Tables[0].Rows[0]["payment_gateway_name"] != null)
                            {
                                if (dsbridge.Tables[0].Rows[0]["payment_gateway_name"].ToString() == "CCAvenue")
                                {
                                    Session["ccAvanue"] = "Y";
                                }
                                else
                                {
                                    {
                                        Session["ccAvanue"] = null;
                                    }
                                }
                            }
                        }
                    }



                    dt.Rows.Add(ProviderId, country_sk, dsfrom, dsto, Subscription_price, "N", "N", "");
                    Session["seeker_subscribed"] = dt;
                    int login_sk = Convert.ToInt32(ViewState["LoginSk"]);
                    i = objmail.sendMail(login_sk, "Partner Pay Now Click event", "user (serice Provider sk= " + ProviderId + ") is clicked for paypal for registration subscription", null);
                }
                string replaced_str = "";
                string curr1 = "";
                string payable_amt = Subscription_price;
                int is_paypal = obj.is_paypal();

                if (is_paypal == 1)
                {
                    if (Subscription_price != "0.00")
                    {


                        if (payable_amt != "0.00")
                        {
                            int country_sk = 0;
                            string str = "";
                            if (ViewState["currency_short_name"] != null)
                            {
                                curr1 = Convert.ToString(ViewState["currency_short_name"]);
                            }
                            try
                            {
                                if (ViewState["country_sk"] != null)
                                    country_sk = Convert.ToInt32(ViewState["country_sk"]);

                                ReadWriteWebservice objs = new ReadWriteWebservice();
                                if (Convert.ToString(ViewState["currency_short_name"]) == "USD")
                                {
                                    str = objs.CurrencyConversion(payable_amt, "USD", "USD");
                                }
                                else if (Convert.ToString(ViewState["currency_short_name"]) == "INR")
                                {
                                    if (ddlCreditCartTypes.SelectedValue == "100" || ddlCreditCartBankNames.SelectedValue == "100" && Session["ccAvanue"] == "Y")
                                    {
                                        SavePromotion_BeforePaypal();
                                        Go_for_payment(ddsgetSeekers, payable_amt); Session["ccAvanue"] = null;
                                        return;
                                    }
                                    else
                                    {
                                        str = objs.CurrencyConversion(payable_amt, ViewState["currency_short_name"].ToString(), "USD");
                                    }
                                }
                                else
                                {
                                    str = objs.CurrencyConversion(payable_amt, ViewState["currency_short_name"].ToString(), "USD");
                                }
                                str = str.Normalize();
                                replaced_str = str.Replace(" USD", "");
                                if (replaced_str != "" && replaced_str != null)
                                {
                                    string str_amt_2 = objs.CurrencyConversion(replaced_str, "USD", curr1);
                                }
                            }
                            catch (System.Exception ex)
                            {
                                BussinessEntity.ExceptionHandling.ErrorMessage = ex.Message;
                                Business.BussinessSendMail send = new BussinessSendMail();
                                //   send.SendMail("info@massage2book.com", "support@massage2book.com", "Exception occured with webservice", ex.Message + " " + " On Subscription Page M2B, currency conversion api from  USD to '" + curr1 + "'", null);
                            }
                            //lbl_curr_2.Text = curr1;
                            Session["Converted_Doller_amount"] = replaced_str;


                            SavePromotion_BeforePaypal();
                            //save with paypal    
                            SubmitToPaypal(replaced_str);
                            //  SavePromotion();
                        }


                    }

                }

            }

            //catch (System.Exception ex)
            //{
            //    BussinessEntity.ExceptionHandling.ErrorMessage = ex.Message;
            //    var st = new System.Diagnostics.StackTrace(ex, true);
            //    StackFrame[] stackFrames = st.GetFrames();
            //    foreach (StackFrame stackFrame in stackFrames)
            //    {
            //        Console.WriteLine(stackFrame.GetMethod().Name);   // write method name
            //        BussinessEntity.ExceptionHandling._lineno = stackFrame.GetFileLineNumber();
            //        BussinessEntity.ExceptionHandling._methodname = Convert.ToString(stackFrame.GetMethod().Name);
            //        BussinessEntity.ExceptionHandling._pagename = Convert.ToString(Request.Url.AbsoluteUri);

            //    }

            //    Response.Redirect(Constants__.WEB_ROOT + "/ErrorMessage.aspx", false);
            //}
        }

        protected void Go_for_payment(DataSet ds, string payable_amt)
        {
            try
            {
                CCACrypto chkSum = new CCACrypto();
                string WorkingKey = ConfigurationManager.AppSettings["CCAVAnueWorkingKey"].ToString();
                Random rnd = new Random();
                int rnd_no = rnd.Next(100, 100000);
                string lblOrderId = ds.Tables[0].Rows[0]["massage_partner_sk"].ToString() + "_" + rnd_no;
                string lblAmount = payable_amt;



                string lblRedirectUrl = (Request.Url).ToString();
                lblRedirectUrl = lblRedirectUrl.Replace("?PayPal=Sub_Cancel", "");
                lblRedirectUrl = lblRedirectUrl.Replace("?PayPal=Info2468Cubek", "");


                string lblCustomerName = ds.Tables[0].Rows[0]["massage_partner_name"].ToString();
                string lblCustAddr = "Not Found";
                string lblCustCountry = "India";
                string lblCustPhone = ds.Tables[0].Rows[0]["phone_nos"].ToString();
                string lblCustEmail = ds.Tables[1].Rows[0]["email_id"].ToString();
                string lblCustState = "";
                string lblCustCity = "";
                string lblZipCode = ds.Tables[0].Rows[0]["postal_code"].ToString();

                string lblRedirectUrlFail = Constants__.WEB_ROOT + "/User/CCAvanueFailPArtner.aspx";
                string lblRedirectUrlsuccess = Constants__.WEB_ROOT + "/User/CCAvanuePassPartner.aspx";

                DataTable dt = new DataTable();
                DataColumn dc;


                dc = new DataColumn("lblOrderId");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);



                dc = new DataColumn("lblAmount");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);


                dc = new DataColumn("lblCustomerName");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dc = new DataColumn("lblCustAddr");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dc = new DataColumn("lblCustCountry");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dc = new DataColumn("lblCustPhone");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);


                dc = new DataColumn("lblCustEmail");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dc = new DataColumn("lblZipCode");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dc = new DataColumn("lblRedirectUrlsuccess");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dc = new DataColumn("lblRedirectUrlFail");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dt.Rows.Add(lblOrderId, lblAmount, lblCustomerName, lblCustAddr, lblCustCountry, lblCustPhone, lblCustEmail, lblZipCode, lblRedirectUrlsuccess, lblRedirectUrlFail);
                Session["CCAvanueDetails"] = dt;


                string lblCustNotes = "";
                string lblDelCustName = "";
                string lblDelCustAddr = "";
                string lblDelCustCntry = "";
                string lblDelCustTel = "";
                string lblDelCustState = "";
                string lblDelCustCity = "";
                string lblDelZipCode = "";

                string lblMerchantParam = "";
                string billingPageHeading = "";
                string lblPayType = "";

                string lblMerchantId = ConfigurationManager.AppSettings["CCAVAnuelblMerchantId"].ToString();
                string Res = chkSum.getchecksum(lblMerchantId, lblOrderId, lblAmount, lblRedirectUrl, WorkingKey);

                string ToEncrypt = "Order_Id=" + lblOrderId + "&Amount=" + lblAmount + "&Merchant_Id=" + lblMerchantId + "&Redirect_Url=" + lblRedirectUrl +
                    "&Checksum=" + Res + "&billing_cust_name=" + lblCustomerName + "&billing_cust_address=" + lblCustAddr + "&billing_cust_country=" + lblCustCountry +
                    "&billing_cust_tel=" + lblCustPhone + "&billing_cust_email=" + lblCustEmail + "&billing_cust_state=" + lblCustState +
                    "&billing_cust_city=" + lblCustCity + "&billing_zip_code=" + lblZipCode + "&billing_cust_notes=" + lblCustNotes +
                    "&delivery_cust_name=" + lblDelCustName + "&delivery_cust_address=" + lblDelCustAddr + "&delivery_cust_country=" + lblDelCustCntry +
                    "&delivery_cust_tel=" + lblDelCustTel + "&delivery_cust_state=" + lblDelCustState + "&delivery_cust_city=" + lblDelCustCity +
                    "&delivery_zip_code=" + lblDelZipCode + "&Merchant_Param=" + lblMerchantParam + "&billingPageHeading=" + billingPageHeading + "&payType=" + lblPayType;


                string Encrypted;


                Encrypted = chkSum.Encrypt(ToEncrypt, WorkingKey);

                Merchant_Id.Value = lblMerchantId;
                encRequest.Value = Encrypted;

                Session["Merchant_Id"] = lblMerchantId;
                Session["Encrypted"] = Encrypted;
                Session["Postbackurl_CCAvanueEncrypted"] = lblRedirectUrl;
                Response.Redirect(Constants__.WEB_ROOT + "/CCAvanue-Gatway-Redirection", false);
                return;
                //   ScriptManager.RegisterStartupScript(this, this.GetType(), "scriptsa", " postbackurl();", true);
            }
            catch (System.Exception ex)
            {
                BussinessEntity.ExceptionHandling.ErrorMessage = ex.Message;
                Business.BussinessSendMail send = new BussinessSendMail();
                Response.Redirect(Constants__.WEB_ROOT + "/massage-partner", false);
                return;
                //   send.SendMail("info@massage2book.com", "support@massage2book.com", "Exception occured with webservice", ex.Message + " " + " On Subscription Page M2B, currency conversion api from  USD to '" + curr1 + "'", null);
            }

        }

        private void HandlePayPalRedirection()
        {
            try
            {
                // *** Set a flag so we know we redirected
                Session["PayPal_Redirected"] = "True";

                // *** Save any values you might need when you return here
                Session["PayPal_OrderAmount"] = OrderAmount;  // already saved above

                //			Session["PayPal_HeardFrom"] = this.txtHeardFrom.Text;
                //			Session["PayPal_ToolUsed"] = this.txtToolUsed.Text;

                PayPalHelper PayPal = new PayPalHelper();
                PayPal.PayPalBaseUrl = App.Configuration.PayPalUrl;
                PayPal.AccountEmail = App.Configuration.AccountEmail;


                decimal us_doller_amount = Convert.ToDecimal(Session["Converted_Doller_amount"]);
                PayPal.Amount = us_doller_amount;


                PayPal.LogoUrl = "http://www.mymassagepartner.com/image/mp_logo.png";

                PayPal.ItemName = "Subscription Amount #" + new Guid().GetHashCode().ToString("x");

                // *** Have paypal return back to this URL


                string url_ = (Request.Url).ToString();
                url_ = url_.Replace("?PayPal=Sub_Cancel", "");
                url_ = url_.Replace("?PayPal=Info2468Cubek", "");
                PayPal.SuccessUrl = url_ + "?PayPal=Info2468Cubek";
                PayPal.CancelUrl = url_ + "?PayPal=Sub_Cancel";
                //append currecy code  //it is comming form table.
                int country_sk = 0;
                if (ViewState["country_sk"] != null)
                    country_sk = Convert.ToInt32(ViewState["country_sk"]);


                PayPal.Currency_code = obj.Get_Currency_Code(country_sk).ToString();
                string url = PayPal.GetSubmitUrl();
                Response.Redirect(url, false);
                return;
            }
            catch (System.Exception ex)
            {
                BussinessEntity.ExceptionHandling.ErrorMessage = ex.Message;
                var st = new System.Diagnostics.StackTrace(ex, true);
                StackFrame[] stackFrames = st.GetFrames();
                foreach (StackFrame stackFrame in stackFrames)
                {
                    Console.WriteLine(stackFrame.GetMethod().Name);   // write method name
                    BussinessEntity.ExceptionHandling._lineno = stackFrame.GetFileLineNumber();
                    BussinessEntity.ExceptionHandling._methodname = Convert.ToString(stackFrame.GetMethod().Name);
                    BussinessEntity.ExceptionHandling._pagename = Convert.ToString(Request.Url.AbsoluteUri);

                }

                Response.Redirect(Constants__.WEB_ROOT + "/ErrorMessage.aspx", false);
            }
        }

        protected void SubmitToPaypal(string replaced_str)
        {
            //////////// creating session for storing details

            //SavePromotion_session();

            ///////////////
            Session["OrderAmounts"] = replaced_str; //willl come from submit button

            // decimal OrderAmount;
            //  decimal OrderAmount;
            // *** Our simplistic 'order validation'
            try
            {
                //amount comming form subcription form
                OrderAmount = Convert.ToDecimal(Session["OrderAmounts"]);
            }
            catch
            {
                this.ShowError("Invalid Order Amount. Get a grip.");
                return;
            }


            // *** Dumb ass data simulation - this should only be set once the order is Validated!
            this.Session["OrderAmount"] = Session["OrderAmounts"];


            // *** Handle PayPal Processing seperately from ProcessCard() since it requires
            // *** passing off to another page on the PayPal Site.
            // *** This request will return to this page Cancel or Success querystring
            if (!this.PayPalReturnRequest)//PP
                this.HandlePayPalRedirection(); // this will end this request!
            else
            {
                // *** CC Processing
                if (!this.ProcessCreditCard())
                    return;    // failure - display error

                // *** Write the order amount (and enything else you might need into session)
                // *** Normally you'd probably write a PK for the final invoice so you 
                // *** can reload it on the Confirmation.aspx page

                Session["PayPal_OrderAmount"] = OrderAmount;
            }
            // *** TODO:  Save your order etc.
            // *** Show the confirmation page - don't transfer so they can refresh without error
            // Response.Redirect("Confirmation.aspx");
            ///
            /////////////////

        }

        public bool ProcessCreditCard()
        {
            // bool Result = false;

            //    ccProcessing CC = null;
            //    ccProcessors CCType = App.Configuration.CCProcessor;

            //    try
            //    {
            //        // *** Figure out which type to use
            //        if (CCType == ccProcessors.AccessPoint)
            //        {
            //            CC = new ccAccessPoint();
            //        }
            //        else if (CCType == ccProcessors.AuthorizeNet)
            //        {
            //            CC = new ccAuthorizeNet();
            //            CC.MerchantPassword = App.Configuration.CCMerchantPassword;
            //        }
            //        else if (CCType == ccProcessors.PayFlowPro)
            //        {
            //            CC = new ccPayFlowPro();
            //            CC.MerchantPassword = App.Configuration.CCMerchantPassword;
            //        }
            //        else if (CCType == ccProcessors.LinkPoint)
            //        {
            //            CC = new ccLinkPoint();
            //            CC.MerchantPassword = App.Configuration.CCMerchantId;
            //            CC.CertificatePath = App.Configuration.CCCertificatePath;   // "d:\app\MyCert.pem"
            //        }


            //        //CC.UseTestTransaction = true;

            //        // *** Tell whether we do SALE or Pre-Auth
            //        CC.ProcessType = App.Configuration.CCProcessType;

            //        // *** Disable this for testing to get provider response
            //        CC.UseMod10Check = true;

            //        CC.Timeout = App.Configuration.CCConnectionTimeout;  // In Seconds
            //        CC.HttpLink = App.Configuration.CCHostUrl;			 // The host Url format will vary with provider
            //        CC.MerchantId = App.Configuration.CCMerchantId;

            //        CC.LogFile = App.Configuration.CCLogFile;
            //        CC.ReferringUrl = App.Configuration.CCReferingOrderUrl;

            //        // *** Name can be provided as a single string or as firstname and lastname
            //        CC.Name = this.txtName.Text;
            //        //CC.Firstname = Cust.Firstname.TrimEnd();
            //        //CC.Lastname = Cust.Lastname.TrimEnd();
            //        // CC.Company = Cust.Company.TrimEnd();

            //        CC.Address = this.txtAddress.Text;
            //        CC.State = this.txtState.Text;
            //        CC.City = this.txtCity.Text;
            //        CC.Zip = this.txtZip.Text;
            //        CC.Country = this.txtCountryId.SelectedValue;	// 2 Character Country ID
            //        CC.Phone = this.txtPhone.Text;
            //        CC.Email = this.txtEmail.Text;

            //        CC.OrderAmount = decimal.Parse(this.txtOrderAmount.Text);

            //        //CC.TaxAmount = Inv.Tax;					// Optional

            //        CC.CreditCardNumber = this.txtCC.Text;
            //        CC.CreditCardExpiration = this.txtCCMonth.SelectedValue + "/" + this.txtCCYear.SelectedValue;

            //        CC.SecurityCode = this.txtSecurity.Text;

            //        // *** Make this Unique
            //        //CC.OrderId = Inv.Invno.TrimEnd() + "_" + DateTime.Now.ToString();
            //        CC.Comment = "Subscription Amount # " + new Guid().GetHashCode().ToString("x");

            //        Result = CC.ValidateCard();

            //        if (!Result)
            //        {
            //            this.lblErrorMessage.Text = CC.ValidatedMessage +
            //                "<hr>" +
            //                CC.ErrorMessage;
            //        }
            //        else
            //        {
            //            // *** Should be APPROVED
            //            this.lblErrorMessage.Text = CC.ValidatedMessage;
            //        }


            //        // *** Always write out the raw response
            //        if (wwUtils.Empty(CC.RawProcessorResult))
            //        {
            //            this.lblErrorMessage.Text += "<hr>" + "Raw Results:<br>" +
            //                                         CC.RawProcessorResult;
            //        }
            //    }
            //    catch (Exception ex)
            //    {

            //        this.lblErrorMessage.Text = "FAILED<hr>" +
            //                                    "Processing Error: " + ex.Message;

            return false;
            //    }

            //    return Result;
        }

        public void ShowError(string ErrorMessage)
        {
            try
            {
                // this.lblErrorMessage.InnerText = ErrorMessage + "<p>";
            }
            catch (System.Exception ex)
            {
                BussinessEntity.ExceptionHandling.ErrorMessage = ex.Message;
                var st = new System.Diagnostics.StackTrace(ex, true);
                StackFrame[] stackFrames = st.GetFrames();
                foreach (StackFrame stackFrame in stackFrames)
                {
                    Console.WriteLine(stackFrame.GetMethod().Name);   // write method name
                    BussinessEntity.ExceptionHandling._lineno = stackFrame.GetFileLineNumber();
                    BussinessEntity.ExceptionHandling._methodname = Convert.ToString(stackFrame.GetMethod().Name);
                    BussinessEntity.ExceptionHandling._pagename = Convert.ToString(Request.Url.AbsoluteUri);

                }

                Response.Redirect(Constants__.WEB_ROOT + "/ErrorMessage.aspx", false);
            }
        }
        #endregion

        #region methods
        private void fillDropdown()
        {
            try
            {
                DataSet ds = new DataSet();


                string mode = "M";
                ds = objBusinessSearch.getSpaType(mode);
                if (ds.Tables[0].Rows.Count > 0)
                {

                    ViewState["country"] = ds.Tables[0];
                    //ddlcountry.DataValueField = "country_sk";
                    //ddlcountry.DataTextField = "country_name";
                    //ddlcountry.DataBind();
                }
                // 224	9	157

                DataRow[] dr;
                dr = ds.Tables[0].Select("country_code='" + Uip + "'");
                int cntry_sk = 0;
                int stt_sk = 0;
                int city_sk = 0;
                foreach (DataRow row in dr)
                {
                    ViewState["selected_country"] = row["country_name"].ToString();
                    ViewState["selected_country_value"] = row["country_sk"].ToString();
                    //ddlcountry.SelectedValue = row["country_name"].ToString();
                    //ddlcountry.ToolTip = ddlcountry.SelectedItem.Text;


                    //fill state                   
                    ds = objRegistrationBusiness.getStateProvider(Convert.ToInt32(ViewState["selected_country_value"]));
                    cntry_sk = Convert.ToInt32(ViewState["selected_country_value"].ToString());
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        ViewState["state"] = ds.Tables[0];
                        //ddlstate.DataValueField = "state_sk";
                        //ddlstate.DataTextField = "state_name";

                        dr = ds.Tables[0].Select("state_name='" + Ustate + "'");
                        foreach (DataRow sts in dr)
                        {
                            ViewState["selected_state_value"] = sts[1].ToString();
                            ViewState["selected_state"] = sts["state_name"].ToString();
                            //Fill City

                            ds = objRegistrationBusiness.getCityProvider(Convert.ToInt32(ViewState["selected_state_value"].ToString()), Convert.ToInt32(ViewState["selected_country_value"].ToString()));
                            if (ds.Tables[0].Rows.Count > 0)
                            {

                                ViewState["state"] = ds.Tables[0];
                                //ddlcity.DataValueField = "city_sk";
                                //ddlcity.DataTextField = "city_name_display";
                                if (Ucity.Contains("'"))
                                    Ucity = Ucity.Replace("'", "''");

                                dr = ds.Tables[0].Select("city_name='" + Ucity + "'");
                                foreach (DataRow ct in dr)
                                {
                                    ViewState["selected_city_value"] = ct[2].ToString();
                                    ViewState["selected_city"] = ct["city_name_display"].ToString();
                                    //city_sk = Convert.ToInt32(ddlcity.SelectedValue);
                                    //ddlcity.ToolTip = ddlcity.SelectedItem.Text;
                                }

                            }
                        }

                        //-------------------------------------------------------------------------

                        //getLocalTime(Lat, Lag, HttpContext.Current.Request.UserHostAddress.ToString(), cntry_sk, stt_sk, city_sk);


                    }
                    else
                    {
                        //ddlstate.Items.Clear();
                        //ddlcity.Items.Clear();
                        //ddlstate.Enabled = false;
                        //ddlcity.Enabled = false;

                    }
                }
                if (dr.Count() <= 0)
                {
                    //  Filldefaultstate_city();

                }
                // ddlcity_SelectedIndexChanged(null, null);

            }
            catch (System.Exception ex)
            {
                BussinessEntity.ExceptionHandling.ErrorMessage = ex.Message;
                var st = new System.Diagnostics.StackTrace(ex, true);
                // Get the top stack frame
                var frame = st.GetFrame(1);
                BussinessEntity.ExceptionHandling._lineno = frame.GetFileLineNumber();
                BussinessEntity.ExceptionHandling._methodname = Convert.ToString(frame.GetMethod());
                BussinessEntity.ExceptionHandling._pagename = Convert.ToString(frame.GetFileName());
                Response.Redirect(Constants__.WEB_ROOT + "/ErrorMessage.aspx", false);
            }


        }

        public void GetIP()
        {
            try
            {


                DataTable table_gio_location = new DataTable();
                table_gio_location = gestsiteurl.GetIP();
                if (table_gio_location.Rows.Count > 0)
                {
                    //Assign reciving ip information to properties
                    Uip = table_gio_location.Rows[0]["countryCode"].ToString();
                    Ustate = table_gio_location.Rows[0]["regionName"].ToString();
                    Ucity = table_gio_location.Rows[0]["city"].ToString();
                    Ustate = Ustate.Replace("'", "''");
                    Ucity = Ucity.Replace("'", "''");
                    Lat = table_gio_location.Rows[0]["lat"].ToString();
                    Lag = table_gio_location.Rows[0]["lon"].ToString();
                }




            }
            catch
            {
                return;
            }
        }
        #endregion

        protected void lnklogin_Click(object sender, EventArgs e)
        {
            Session["current_url"] = Constants__.WEB_ROOT + "/faq";
            Response.Redirect(Constants__.WEB_ROOT + "/signup",false);
        }

        [WebMethod]                                 //Default.aspx.cs
        public static void Send_Request_mail(string id, string trans_no,string sk)
        {
            if (sk != "0")
            {
                int status = 0;
                BussinessSendMail objmail = new BussinessSendMail();

                objmail.Mrecipients = ConfigurationManager.AppSettings["EmailTable2Book"].ToString();
                objmail.Mbody = "User (Email id: " + id + ") done payment using Paytm.<br/><br/>Transaction ID: " + trans_no + "<br/>Partner SK is: "+sk+" ";
                objmail.Msubject = "Massage Partner Subscription | User Subscription Information";
                status = objmail.SendMail();
                //txttransaction.Text = "";
                //lblresult.Visible = true;
                //lblresult.Text = "information submitted successfully!";
            }
            else
            {
                int status = 0;
                BusinessMPartener objmpartner = new BusinessMPartener();
                DataSet ds = objmpartner.get_sk_by_email_id(id);
                if (ds.Tables[0].Rows[0]["massage_partner_sk"].ToString() != "0")
                {
                    BussinessSendMail objmail = new BussinessSendMail();

                    objmail.Mrecipients = ConfigurationManager.AppSettings["EmailTable2Book"].ToString();
                    objmail.Mbody = "User (Email id: " + id + ") done payment using Paytm.<br/><br/>Transaction ID: " + trans_no + "<br/>Partner SK is: " + ds.Tables[0].Rows[0]["massage_partner_sk"].ToString() + " ";
                    objmail.Msubject = "Massage Partner Subscription | User Subscription Information";
                    status = objmail.SendMail();
                }
                else
                {
                    BussinessSendMail objmail = new BussinessSendMail();

                    objmail.Mrecipients = ConfigurationManager.AppSettings["EmailTable2Book"].ToString();
                    objmail.Mbody = "User (Email id: " + id + ") done payment using Paytm.<br/><br/>Transaction ID: " + trans_no + "<br/>Partner SK is: New User ";
                    objmail.Msubject = "Massage Partner Subscription | User Subscription Information(New User)";
                    status = objmail.SendMail();
                }
            }
        }
    }
}