using System;
using System.Collections.Generic;
using System.Linq;
using BussinessEntity;
using System.Drawing;
using System.Text.RegularExpressions;
using RESTFulWCFService;
using System.Diagnostics;
using System.Drawing.Drawing2D;
using PayPalIntegration;
using System.Text.RegularExpressions;
using CCA.Util;
using Stripe;
using System.Net;
using System.Collections.Generic;
using Business;
using System.Data;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.UI;
using System.Configuration;
using System.Web;


namespace RESTFulWCFService.MassagePartener.User
{
    public partial class All_messages : System.Web.UI.Page
    {
        //paymentSection
        BussinessPaypal obj = new BussinessPaypal();
        BussinessSendMail objmail = new BussinessSendMail();
        private bool PayPalReturnRequest = false;
        protected decimal OrderAmount = 0.00M;

        #region objects
        private int PageSize = 2;
        PagedDataSource adsource;
        GetSiteURL gestsiteurl = new GetSiteURL();
        RegistrationBusiness objRegistrationBusiness = new RegistrationBusiness();
        Business.BusinessLogin objBusinessLogin = new BusinessLogin();
        Business.BusinessMPartener objbusinessmpartener = new BusinessMPartener();
        DataTable dt;
        static int i = 0;
        #endregion
        protected void Page_Load(object sender, EventArgs e)
        {
            Response.AddHeader("Refresh", Convert.ToString((Session.Timeout * 60) - 120));
            if (Session["massage_partner_sk"] != null)
            {
                if (Session["seeker_subscribed"] == null)
                    hdnpartnersubscribed.Value = "";
                else
                    hdnpartnersubscribed.Value = Session["seeker_subscribed"].ToString();

                ViewState["massage_partner_sk"] = Session["massage_partner_sk"].ToString();
                ViewState["LoginSk"] = Session["mp_login_sk"].ToString();
                ViewState["country_sk"] = Session["country_sk"].ToString();
                if (!IsPostBack)
                {
                    hdncountry.Value = Session["country_sk"].ToString();
                    ViewState["massage_partner_sk"] = Session["massage_partner_sk"].ToString();
                    ViewState["LoginSk"] = Session["mp_login_sk"].ToString();
                    ViewState["country_sk"] = Session["country_sk"].ToString();
                    if (Session["seeker_subscribed"] == null)
                        hdnpartnersubscribed.Value = "";
                    payment_fill();
                    button_type();
                    DataSet ds = objbusinessmpartener.get_messages(Convert.ToInt32(Session["massage_partner_sk"].ToString()));
                    ViewState["All_Data"] = ds;
                    bind_datatable(ds);
                    //  ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "tmp1sd", "<script type='text/javascript'>openpopuppaypal();</script>", false);
                    // ScriptManager.GetCurrent(this).RegisterPostBackControl(Button1);
                }
                else
                {
                    bind_datatable((DataSet)ViewState["All_Data"]);
                }
                if (!Page.IsPostBack)
                {
                    if ((Request.QueryString["PayPal"] != null && Request.QueryString["PayPal"].ToString() == "Info2468Cubek"))
                    {
                        SavePromotion_AfterPaypal();
                        lblpaymentinfo.Style.Add("color", "green");
                        lblpaymentinfo.InnerHtml = "Annual Listing Payment Successful.";
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "script", "openOffersDialog();", true);
                        return;
                    }
                    else if ((Request.QueryString["PayPal"] != null && Request.QueryString["PayPal"].ToString() == "Cubek2468Tech"))
                    {
                        SavePromotion_AfterPaypal();
                        lblpaymentinfo.Style.Add("color", "green");
                        lblpaymentinfo.InnerHtml = "Annual Listing Payment Successful.";
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "script", "openOffersDialog();", true);
                        return;
                    }
                    else if ((Request.QueryString["PayPal"] != null && Request.QueryString["PayPal"].ToString() == "Sub_Cancel"))
                    {
                        //lblSuccess.InnerText = "Payment not done";
                        // lblSuccess.Style.Add("color", "red");
                        lblpaymentinfo.Style.Add("color", "red");
                        lblpaymentinfo.InnerHtml = "Annual Listing Payment Unsuccessful";
                        DataTable DT = new DataTable();
                        if (Session["seeker_subscribed"] != null && Session["seeker_subscribed"].ToString() != "")
                        {
                            DT = (DataTable)(Session["seeker_subscribed"]);
                            if (DT.Rows.Count > 0)
                            {
                                int service_provider_sk = Convert.ToInt32(DT.Rows[0]["massage_partner_sk"]);
                                int status = objmail.send_notification_mail_Provider_annual_sub(service_provider_sk);
                            }
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "script", "openOffersDialog();", true);
                            return;
                            //Session["Provider_subscription"] = null;
                        }
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "script", "openOffersDialog();", true);
                        return;

                    }
                }
            }
            else
            {
                Session["current_url"] = Request.RawUrl;
                Response.Redirect(Constants__.WEB_ROOT+"/Home",false);
            }
           
        }
        #region methods
        private void bind_datatable(DataSet ds)
        {
            
            UCPager1.Ods = ds.Tables[0];
            UCPager1.ObjectControl = DataList1;
            UCPager1.PageSize = 5;
        }
        #endregion
        protected void DataList1_ItemDataBound(object sender, DataListItemEventArgs e)
        {
            System.Web.UI.WebControls.Image img_ = (System.Web.UI.WebControls.Image)e.Item.FindControl("image1");
            HiddenField from_sk = (HiddenField)e.Item.FindControl("hdnfromsk");
            HtmlControl  objDiv = e.Item.FindControl("main_message_div") as HtmlControl ;
            HtmlControl imgdiv = e.Item.FindControl("image_bx") as HtmlControl;
            LinkButton btnrply = e.Item.FindControl("lnkbtnreply") as LinkButton;
            LinkButton btnsend = e.Item.FindControl("btnsend") as LinkButton;
            LinkButton btnsend1 = e.Item.FindControl("btnsend1") as LinkButton;
            HtmlControl divcontact = e.Item.FindControl("divcontact") as HtmlControl;
            Button lblcontact = e.Item.FindControl("lblcontact") as Button;
            Button btnshowcontact = e.Item.FindControl("btnshowcontact") as Button;

            if (hdnpartnersubscribed.Value == null || hdnpartnersubscribed.Value == "" || hdnpartnersubscribed.Value == "N")
            {
                btnsend.Visible = false;
                btnsend1.Visible = true;
            }
            else
            {
                btnsend.Visible = true;
                btnsend1.Visible = false;
            }
            if (from_sk.Value == Session["massage_partner_sk"].ToString())
            {
                objDiv.Attributes["class"] = "media right-align-box";
                divcontact.Visible = false;
                btnrply.Visible = false;
                if ((Convert.ToString(DataBinder.Eval(e.Item.DataItem, "from_image"))) != "")
                    img_.ImageUrl = Constants__.WEB_ROOT_CDN + "/User/Images/" + (Convert.ToString(DataBinder.Eval(e.Item.DataItem, "from_image")));
                else
                    img_.ImageUrl = Constants__.WEB_ROOT_CDN + "/image/no_image.jpg";
                
                // ScriptManager.RegisterStartupScript(this, this.GetType(), name, "change_design('ctl00_ContentPlaceHolder1_DataList1_ctl00_main_message_div')", true);
            }
            else
            {
                if (hdnpartnersubscribed.Value == null || hdnpartnersubscribed.Value == "" || hdnpartnersubscribed.Value == "N")
                {
                    lblcontact.Visible = false;
                    btnshowcontact.Visible = true;
                    
                }
                else
                {
                    lblcontact.Visible = true;
                    btnshowcontact.Visible = false;
                }

                if ((Convert.ToString(DataBinder.Eval(e.Item.DataItem, "from_image"))) != "")
                    img_.ImageUrl = Constants__.WEB_ROOT_CDN + "/User/Images/" + (Convert.ToString(DataBinder.Eval(e.Item.DataItem, "from_image")));
                else
                    img_.ImageUrl = Constants__.WEB_ROOT_CDN + "/image/no_image.jpg";
            }

        }

        protected void DataList1_ItemCommand(object source, DataListCommandEventArgs e)
        {
            TextBox txtreply = (TextBox)e.Item.FindControl("txtreply");
            switch (e.CommandName)
            {
                case "reply":
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "harit25", "change_visibility('display')", true);
                        break;
                    }
                case "send_reply":
                    {
                       
                        //bind_datatable();
                     //   Response.Redirect(Request.RawUrl);
                        break;
                    }
            }
        }

        protected void Button1_Click(object sender, EventArgs e)
        {
            int i = objbusinessmpartener.insert_messages(Convert.ToInt32(Session["massage_partner_sk"].ToString()), Convert.ToInt32(hdntomsg.Value), hdnmsg.Value);
            //ScriptManager.RegisterStartupScript(this.Page, Page.GetType(), "text", "Refresh_Page();", true);
//            Page.ClientScript.RegisterStartupScript(this.GetType(), "CallMyFunction", "Refresh_Page()", true);

            DataSet ds = objbusinessmpartener.get_messages(Convert.ToInt32(Session["massage_partner_sk"].ToString()));
            ViewState["All_Data"] = ds;
            bind_datatable(ds);
            Send_message_copy();
            Response.Redirect(Request.RawUrl);
           
        }
        private void Send_message_copy()
        {
            try
            {
                DataSet ds = objbusinessmpartener.get_partner_details(Convert.ToInt32(Session["massage_partner_sk"].ToString()));
                DataSet ds1 = objbusinessmpartener.get_partner_details(Convert.ToInt32(hdntomsg.Value));

                BussinessSendMail objmail = new BussinessSendMail();
                //string EncrMail = Cryptology.Encrypt(hdnto.Value);
                //string filePath = Constants__.WEB_ROOT + "/User/messages.aspx?Msk=" + EncrMail;
                //string senderDetail = "<br /><br /><b>Sender Detail</b> <br />" + name.Value + "<br />" + company.Value + " " + country.Value + "<br /> " + phone.Value;

                objmail.sender = ConfigurationManager.AppSettings["EmailTable2Book"].ToString();
                String body = "Dear " + (ds1.Tables[0].Rows[0]["massage_partner_name"].ToString()) + ",<br/><br/>You have just received message at <a href='https://www.mymassagepartner.com' target='_blank'><span style='color: #FF0000;'>My</span><span style='color: #000000;'>MassagePartner.com</span></a>.<br/>Please do check and reply. It’s time to have body massage with your massage partner.<br/><br/>Your login credentials are provided below for your convenience.<br/><br/>Login at: <span style='color:blue'><u>https://www.mymassagepartner.com/login</u></span><br/>Your User ID: <span style='color:blue'><u>$email</u></span><br/>Your Password: $password<br/><br/>For any further query or question please do contact us directly. We are here to help you 24/7.<br/><br/><b>Best Regards<br/>Jasmine - customer support<br/><span style='color: #FF0000;'>My</span><span style='color: #000000;'>MassagePartner.com</span></a> <span style='color: #000000;'>Team</span>";
                body = body.Replace("$email", ds1.Tables[1].Rows[0]["email_id"].ToString());
                body = body.Replace("$password", ds1.Tables[1].Rows[0]["password"].ToString());
               
                objmail.Mbody = body;// +senderDetail;
                //objmail.UserType ="Massage-Partner";
                objmail.Mrecipients = ds1.Tables[1].Rows[0]["email_id"].ToString();
                objmail.Msubject = "Massage partner sent you a message";
                int status = objmail.SendMail();
                // lblreportmsg.Text = "message sent successfully!!";
            }
            catch (System.Exception ex)
            {
                BussinessEntity.ExceptionHandling.ErrorMessage = ex.Message;
                var st = new System.Diagnostics.StackTrace(ex, true);
                StackFrame[] stackFrames = st.GetFrames();
                foreach (StackFrame stackFrame in stackFrames)
                {
                    Console.WriteLine(stackFrame.GetMethod().Name);   // write method name
                    BussinessEntity.ExceptionHandling._lineno = stackFrame.GetFileLineNumber();
                    BussinessEntity.ExceptionHandling._methodname = Convert.ToString(stackFrame.GetMethod().Name);
                    BussinessEntity.ExceptionHandling._pagename = Convert.ToString(stackFrame.GetFileName());

                }

                Response.Redirect(Constants__.WEB_ROOT + "/ErrorMessage.aspx", false);
            }
        }
        #region paymentGateway
        private void payment_fill()
        {
            DataSet ds = new DataSet();
            ds = objbusinessmpartener.getPartnerSubsciption(Convert.ToInt32(hdncountry.Value));
            //ds = objbusinessmpartener.getPartnerSubsciption(Convert.ToInt32("220"));


            if (ds.Tables[1].Rows.Count > 0)
            {
                ViewState["Seeker_subscrition_price"] = Math.Round(decimal.Parse(ds.Tables[1].Rows[0]["basic_unit_price"].ToString()), 2);
         //       ViewState["currency_short_name"] = ds.Tables[3].Rows[0]["currcountry_skency_short_name"];
                if (ds.Tables[1].Rows[0]["currency_short_name"].ToString() == "INR")
                {
                    price.InnerText = "Rs. " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), 0);



                    if (ConfigurationManager.AppSettings["Provider_subscription_default_year"].ToString() == "1")
                    {
                        price.InnerText = "Rs. " + " " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), 0);
                        checkboxOneYear_provider.Checked = true;
                        checkboxTwoYear_provider.Checked = false;
                        checkboxThreeYear_provider.Checked = false;
                        lblyearsub.InnerText = "1 Year";
                    }
                    else if (ConfigurationManager.AppSettings["Provider_subscription_default_year"].ToString() == "2")
                    {
                        price.InnerText = "Rs. " + " " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_india_2_year_per_partner"].ToString()));
                        checkboxOneYear_provider.Checked = false;
                        checkboxTwoYear_provider.Checked = true;
                        checkboxThreeYear_provider.Checked = false;
                        lblyearsub.InnerText = "2 Year";

                    }
                    else if (ConfigurationManager.AppSettings["Provider_subscription_default_year"].ToString() == "3")
                    {
                        price.InnerText = "Rs. " + " " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_india_3_year_per_partner"].ToString()));
                        checkboxOneYear_provider.Checked = false;
                        checkboxTwoYear_provider.Checked = false;
                        checkboxThreeYear_provider.Checked = true;
                        lblyearsub.InnerText = "3 Year";

                    }



                    ViewState["currency_short_name"] = ds.Tables[1].Rows[0]["currency_short_name"];
                    checkboxOneYear_provider.Text = "Rs. " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), 0);
                    checkboxTwoYear_provider.Text = "Rs. " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_india_2_year_per_partner"].ToString()));
                    checkboxThreeYear_provider.Text = "Rs. " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_india_3_year_per_partner"].ToString()));
                    price.InnerText = price.InnerText.Replace(".00", "");
                }
                else
                {
                    ViewState["currency_short_name"] = "USD";
                    price.InnerText = "USD" + " " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), 0);

                    if (ConfigurationManager.AppSettings["Provider_subscription_default_year"].ToString() == "1")
                    {
                        price.InnerText = "USD" + " " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), 0);
                        checkboxOneYear_provider.Checked = true;
                        checkboxTwoYear_provider.Checked = false;
                        checkboxThreeYear_provider.Checked = false;
                        lblyearsub.InnerText = "1 Year";
                    }
                    else if (ConfigurationManager.AppSettings["Provider_subscription_default_year"].ToString() == "2")
                    {
                        price.InnerText = "USD" + " " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_foreign_2_year_per_partner"].ToString()));
                        checkboxOneYear_provider.Checked = false;
                        checkboxTwoYear_provider.Checked = true;
                        checkboxThreeYear_provider.Checked = false;
                        lblyearsub.InnerText = "2 Year";

                    }
                    else if (ConfigurationManager.AppSettings["Provider_subscription_default_year"].ToString() == "3")
                    {
                        price.InnerText = "USD" + " " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_foreign_3_year_per_partner"].ToString()));
                        checkboxOneYear_provider.Checked = false;
                        checkboxTwoYear_provider.Checked = false;
                        checkboxThreeYear_provider.Checked = true;
                        lblyearsub.InnerText = "3 Year";

                    }


                    checkboxOneYear_provider.Text = "USD" + " " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), 0);
                    checkboxTwoYear_provider.Text = "USD" + " " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_foreign_2_year_per_partner"].ToString()));
                    checkboxThreeYear_provider.Text = "USD" + " " + Get_Listing_Price(ds.Tables[1].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_foreign_3_year_per_partner"].ToString()));
                    price.InnerText = price.InnerText.Replace(".00", "");
                }
            }
            else
            {
                if (ds.Tables[2].Rows.Count > 0)
                {

                    string price1 = Get_Listing_Price(ds.Tables[2].Rows[0]["basic_unit_price"].ToString(), 0);

                    price.InnerText = "USD " + price1;

                    // price.InnerText = "USD " + ds.Tables[2].Rows[0]["basic_unit_price"].ToString();
                    ViewState["currency_short_name"] = "USD";

                    if (ConfigurationManager.AppSettings["Provider_subscription_default_year"].ToString() == "1")
                    {
                        price.InnerText = "USD" + " " + Get_Listing_Price(ds.Tables[2].Rows[0]["basic_unit_price"].ToString(), 0);
                        checkboxOneYear_provider.Checked = true;
                        checkboxTwoYear_provider.Checked = false;
                        checkboxThreeYear_provider.Checked = false;
                        lblyearsub.InnerText = "1 Year";
                        ViewState["Seeker_subscrition_price"] = Get_Listing_Price(ds.Tables[2].Rows[0]["basic_unit_price"].ToString(), 0);

                    }
                    else if (ConfigurationManager.AppSettings["Provider_subscription_default_year"].ToString() == "2")
                    {
                        price.InnerText = "USD" + " " + Get_Listing_Price(ds.Tables[2].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_foreign_2_year_per_partner"].ToString()));
                        checkboxOneYear_provider.Checked = false;
                        checkboxTwoYear_provider.Checked = true;
                        checkboxThreeYear_provider.Checked = false;
                        lblyearsub.InnerText = "2 Year";
                        ViewState["Seeker_subscrition_price"] = Get_Listing_Price(ds.Tables[2].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_foreign_2_year_per_partner"].ToString()));


                    }
                    else if (ConfigurationManager.AppSettings["Provider_subscription_default_year"].ToString() == "3")
                    {
                        price.InnerText = "USD" + " " + Get_Listing_Price(ds.Tables[2].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_foreign_3_year_per_partner"].ToString()));
                        checkboxOneYear_provider.Checked = false;
                        checkboxTwoYear_provider.Checked = false;
                        checkboxThreeYear_provider.Checked = true;
                        lblyearsub.InnerText = "3 Year";
                        ViewState["Seeker_subscrition_price"] = Get_Listing_Price(ds.Tables[2].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_foreign_3_year_per_partner"].ToString()));

                    }




                    checkboxOneYear_provider.Text = "USD" + " " + Get_Listing_Price(ds.Tables[2].Rows[0]["basic_unit_price"].ToString(), 0);
                    checkboxTwoYear_provider.Text = "USD" + " " + Get_Listing_Price(ds.Tables[2].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_foreign_2_year_per_partner"].ToString()));
                    checkboxThreeYear_provider.Text = "USD" + " " + Get_Listing_Price(ds.Tables[2].Rows[0]["basic_unit_price"].ToString(), Convert.ToDecimal(ConfigurationManager.AppSettings["Provider_foreign_3_year_per_partner"].ToString()));
                    price.InnerText = price.InnerText.Replace(".00", "");
                }
            }

            checkboxOneYear_provider.Text = checkboxOneYear_provider.Text.Replace(".00", "");
            checkboxTwoYear_provider.Text = checkboxTwoYear_provider.Text.Replace(".00", "");
            checkboxThreeYear_provider.Text = checkboxThreeYear_provider.Text.Replace(".00", "");

        }
        private void button_type()
        {
            DataSet dsButtonType = new DataSet();
            dsButtonType = objRegistrationBusiness.getPaymentButton_type();

            if (dsButtonType.Tables.Count > 0)
            {
                //   For indian customer
                if (hdncountry.Value == "100")
                {
                    if (dsButtonType.Tables.Count > 0)
                    {
                        if ((dsButtonType.Tables[1].Rows[0]["parameter_value"].ToString()).Trim() == "M")   // Check for Indian payment gatway M- MultiPaymentGateway
                        {

                            divpaypalccavanue_1.Visible = true; // cavanue payment gatway
                            btnPayNow.Visible = false; // Paypal payment gatway                                          
                            divpaypalStripe_1.Visible = false;


                        }  //  for single payment gatway selection
                        else if ((dsButtonType.Tables[3].Rows[0]["parameter_value"].ToString()).Trim() == "P")   // Check for Indian payment gatway P-Paypal Directly, M- MultiPaymentGateway
                        {
                            divpaypalccavanue_1.Visible = false; // cavanue payment gatway
                            btnPayNow.Visible = true;  // Paypal payment gatway
                            divpaypalStripe_1.Visible = false; // stripe payment gatway
                        }
                        else
                        {

                            divpaypalccavanue_1.Visible = false; // cavanue payment gatway
                            btnPayNow.Visible = false;  // Paypal payment gatway

                            divpaypalStripe_1.Visible = true; // stripe payment gatway
                        }
                    }
                }
                else
                {
                    // For International Customer
                    if ((dsButtonType.Tables[2].Rows[0]["parameter_value"].ToString()).Trim() == "P")   // Check for global payment gatway P->Paypal, S->Stripe
                    {   // Case for International PAYPAL case

                        divpaypalccavanue_1.Visible = false; // cavanue payment gatway
                        btnPayNow.Visible = true; // Paypal payment gatway

                        divpaypalStripe_1.Visible = false; // stripe payment gatway

                    }
                    else
                    {

                        // Case for International Stripe case

                        divpaypalccavanue_1.Visible = false;
                        btnPayNow.Visible = false;

                        divpaypalStripe_1.Visible = true;
                    }


                }
            }
        }
        protected string Get_Listing_Price(string payment, decimal for_year)
        {


            string amount = "00";
            if (Convert.ToDouble(payment) > 100)
            {
                amount = (Math.Round(Convert.ToDouble(Convert.ToDecimal(payment) + (Convert.ToDecimal(payment) * for_year)) / 100d, 0) * 100).ToString("000.00");
            }
            else
            {
                amount = (Math.Round(Convert.ToDouble(Convert.ToDecimal(payment) + (Convert.ToDecimal(payment) * for_year)) / 10d, 1) * 10).ToString("00.00");

            }

            return amount;
        }
        protected void SavePromotion_AfterPaypal()
        {
            ///
            if (Session["seeker_subscribed"] != null)
            {

                DataTable dt = new DataTable();
                DataColumn dc;
                dc = new DataColumn("massage_partner_sk");
                dc.DataType = System.Type.GetType("System.Int32");
                dt.Columns.Add(dc);


                dc = new DataColumn("country_sk");
                dc.DataType = System.Type.GetType("System.Int32");
                dt.Columns.Add(dc);

                dc = new DataColumn("subscription_start_date");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dc = new DataColumn("subscription_end_date");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);


                dc = new DataColumn("one_time_price");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dc = new DataColumn("is_subscribed");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);
                // dt = (DataTable)(Session["ServiceProvider_subscription"]);


                dc = new DataColumn("is_paid");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);


                dc = new DataColumn("PaymentGateway");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);


                dt = (DataTable)(Session["seeker_subscribed"]);
                dt.Rows[0]["is_subscribed"] = "Y";
                dt.Rows[0]["is_paid"] = "Y";
                dt.Rows[0]["PaymentGateway"] = "Paypal";
                objbusinessmpartener.InsertmassagePartnerSubscriptionDetails(dt);
                //  lblSuccess.InnerText = "Information saved successfully";
                // lblSuccess.Style.Add("color", "green");
                //  Session["ServiceProvider_subscription"] = null;
                Session["seeker_subscribed"] = "Y";
                lblpaymentinfo.InnerText = "Membership Payment Successfull!";
                ScriptManager.RegisterStartupScript(this, this.GetType(), "haritscript123", "openOffersDialog();", true);
                return;
                // Session["exists_promotion"] = "PromotionExists";
                //  ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "tmp23", "<script type='text/javascript'>fun_noData_popup('Promotion Successfully Paid, Now upload promotion.');</script>", false);

            }
            else
            {
                // lblSuccess.InnerText = "Payment not done";
                //  lblSuccess.Style.Add("color", "red");
                Session["seeker_subscribed"] = null;

            }
        }

        protected void SavePromotion_BeforePaypal()
        {
            ///
            if (Session["seeker_subscribed"] != null)
            {

                DataTable dt = new DataTable();
                DataColumn dc;
                dc = new DataColumn("massage_partner_sk");
                dc.DataType = System.Type.GetType("System.Int32");
                dt.Columns.Add(dc);


                dc = new DataColumn("country_sk");
                dc.DataType = System.Type.GetType("System.Int32");
                dt.Columns.Add(dc);

                dc = new DataColumn("subscription_start_date");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dc = new DataColumn("subscription_end_date");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);


                dc = new DataColumn("one_time_price");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dc = new DataColumn("is_subscribed");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);
                //  dt = (DataTable)(Session["ServiceProvider_subscription"]);


                dc = new DataColumn("is_paid");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dc = new DataColumn("PaymentGateway");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);



                dt = (DataTable)(Session["seeker_subscribed"]);
                dt.Rows[0]["is_subscribed"] = "N";
                dt.Rows[0]["is_paid"] = "N";
                dt.Rows[0]["PaymentGateway"] = "";



                objbusinessmpartener.InsertmassagePartnerSubscriptionDetails(dt);
                //lblSuccess.InnerText = "Information saved successfully";
                //lblSuccess.Style.Add("color", "green");
                //  Session["ServiceProvider_subscription"] = null;
                ScriptManager.RegisterStartupScript(this, this.GetType(), "script", "openOffersDialog();", true);
                return;
                // Session["exists_promotion"] = "PromotionExists";
                //  ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "tmp23", "<script type='text/javascript'>fun_noData_popup('Promotion Successfully Paid, Now upload promotion.');</script>", false);

            }
            else
            {
                // lblSuccess.InnerText = "Payment not done";
                // lblSuccess.Style.Add("color", "red");
                Session["seeker_subscribed"] = null;

            }
        }
        protected void SubmitStripe_1_Click(object sender, EventArgs e)
        {
            //try
            {
                Utils.Mails mail = new Utils.Mails();
                mail.payNow_Click_Mail(Session["country_sk"].ToString(), Session["massage_partner_sk"].ToString());
                if (Session["massage_partner_sk"] != null)
                {
                    DataSet ds = new DataSet();
                    int? Banksk = null;
                    int? cardsk = null;
                    ds = objBusinessLogin.Insert_payment_bridge(Convert.ToInt32(Session["massage_partner_sk"].ToString()), "sp", Banksk, cardsk, "");

                }
                Session["ccAvanue"] = null;
                Session["CurrentURL"] = HttpContext.Current.Request.Url.AbsoluteUri;
                Session["Provider_payment"] = price.InnerText + "|" + (checkboxOneYear_provider.Checked ? "1" : (checkboxTwoYear_provider.Checked ? "2" : "3"));
                Session["StripepaymentGatway"] = txtCardNumber_1.Text.Trim() + "|"
                        + txtCardExpirationMonth_1.Text.Trim() + "|"
                        + txtCardExpirationYear_1.Text.Trim() + "|"
                        + txtCardName_1.Text.Trim();
                Response.Redirect(Constants__.WEB_ROOT + "/partner-subscription", false);
                return;

            }


        }


        protected void paypal_Click(object sender, EventArgs e)
        {
            try
            {
                Utils.Mails mail = new Utils.Mails();
                mail.payNow_Click_Mail(Session["country_sk"].ToString(), Session["massage_partner_sk"].ToString());

                if (Session["massage_partner_sk"] != null)
                {
                    DataSet ds = new DataSet();
                    int? Banksk = null;
                    int? cardsk = null;
                    ds = objBusinessLogin.Insert_payment_bridge(Convert.ToInt32(Session["massage_partner_sk"].ToString()), "sp", Banksk, cardsk, "");
                    if (ds.Tables.Count > 0)
                    {
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            if (ds.Tables[0].Rows[0]["payment_gateway_name"] != null)
                            {
                                if (ds.Tables[0].Rows[0]["payment_gateway_name"].ToString() == "CCAvenue")
                                {
                                    Session["ccAvanue"] = "Y";
                                }
                                else
                                {
                                    {
                                        Session["ccAvanue"] = null;
                                    }
                                }
                            }
                        }
                    }
                }
                Session["CurrentURL"] = HttpContext.Current.Request.Url.AbsoluteUri;
                Session["Provider_payment"] = price.InnerText + "|" + (checkboxOneYear_provider.Checked ? "1" : (checkboxTwoYear_provider.Checked ? "2" : "3"));
                Response.Redirect(Constants__.WEB_ROOT + "/partner-subscription", false);
                return;
            }
            catch (System.Exception ex)
            {
                BussinessEntity.ExceptionHandling.ErrorMessage = ex.Message;
                var st = new System.Diagnostics.StackTrace(ex, true);
                StackFrame[] stackFrames = st.GetFrames();
                foreach (StackFrame stackFrame in stackFrames)
                {
                    Console.WriteLine(stackFrame.GetMethod().Name);   // write method name
                    BussinessEntity.ExceptionHandling._lineno = stackFrame.GetFileLineNumber();
                    BussinessEntity.ExceptionHandling._methodname = Convert.ToString(stackFrame.GetMethod().Name);
                    BussinessEntity.ExceptionHandling._pagename = Convert.ToString(Request.Url.AbsoluteUri);

                }

                Response.Redirect(Constants__.WEB_ROOT + "/ErrorMessage.aspx", false);
                return;
            }
        }



        protected void paypal_Click_CCAVANUE_Netbanking(object sender, EventArgs e)
        {

            Utils.Mails mail = new Utils.Mails();
            mail.payNow_Click_Mail(Session["country_sk"].ToString(), Session["massage_partner_sk"].ToString());

            DataSet ddsgetSeekers = new DataSet();
            if (Session["massage_partner_sk"] != null)
            {
                DataSet ds = new DataSet();
                ds = objBusinessLogin.Insert_payment_bridge(Convert.ToInt32(Session["massage_partner_sk"].ToString()), "sp", null, null, "Internet Banking");
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        if (ds.Tables[0].Rows[0]["payment_gateway_name"] != null)
                        {
                            if (ds.Tables[0].Rows[0]["payment_gateway_name"].ToString() == "CCAvenue")
                            {
                                Session["ccAvanue"] = "Y";
                            }
                            else
                            {
                                {
                                    Session["ccAvanue"] = null;
                                }
                            }
                        }
                    }
                }
            }


            Session["CurrentURL"] = HttpContext.Current.Request.Url.AbsoluteUri;
            Session["Provider_payment"] = price.InnerText + "|" + (checkboxOneYear_provider.Checked ? "1" : (checkboxTwoYear_provider.Checked ? "2" : "3"));
            Response.Redirect(Constants__.WEB_ROOT + "/partner-subscription", false);
            return;
        }

        protected void paypal_Click_CCAVANUE_OtherPayment(object sender, EventArgs e)
        {
            Utils.Mails mail = new Utils.Mails();
            mail.payNow_Click_Mail(Session["country_sk"].ToString(), Session["massage_partner_sk"].ToString());
            if (Session["massage_partner_sk"] != null)
            {
                DataSet ds = new DataSet();
                ds = objBusinessLogin.Insert_payment_bridge(Convert.ToInt32(Session["massage_partner_sk"].ToString()), "sp", null, null, "Other Payment Methods");
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        if (ds.Tables[0].Rows[0]["payment_gateway_name"] != null)
                        {
                            if (ds.Tables[0].Rows[0]["payment_gateway_name"].ToString() == "CCAvenue")
                            {
                                Session["ccAvanue"] = "Y";
                            }
                            else
                            {
                                {
                                    Session["ccAvanue"] = null;
                                }
                            }
                        }
                    }
                }
            }


            Session["CurrentURL"] = HttpContext.Current.Request.Url.AbsoluteUri;
            Session["Provider_payment"] = price.InnerText + "|" + (checkboxOneYear_provider.Checked ? "1" : (checkboxTwoYear_provider.Checked ? "2" : "3"));
            Response.Redirect(Constants__.WEB_ROOT + "/partner-subscription", false);
            return;
        }

        protected void DebitCard_Payment_Click(object sender, EventArgs e)
        {
            try
            {
                Utils.Mails mail = new Utils.Mails();
                mail.payNow_Click_Mail(Session["country_sk"].ToString(), Session["massage_partner_sk"].ToString());

                lblddlDebitCartTypes.Text = lblddlDebitCartBankNames.Text = "";

                if (ddlDebitCartTypes.SelectedValue == "0" || ddlDebitCartBankNames.SelectedValue == "0")
                {
                    if (ddlDebitCartTypes.SelectedValue == "0")
                    {
                        lblddlDebitCartTypes.Text = "Select Card Type";
                    }

                    if (ddlDebitCartBankNames.SelectedValue == "0")
                    {
                        lblddlDebitCartBankNames.Text = "Select Bank Name";
                    }

                    return;
                }

                if (Session["massage_partner_sk"] != null)
                {
                    DataSet ds = new DataSet();

                    int Banksk = Convert.ToInt32(ddlDebitCartBankNames.SelectedValue);
                    int cardsk = Convert.ToInt32(ddlDebitCartTypes.SelectedValue);
                    ds = objBusinessLogin.Insert_payment_bridge(Convert.ToInt32(Session["massage_partner_sk"].ToString()), "sp", cardsk, Banksk, "Debit Card");
                    if (ds.Tables.Count > 0)
                    {
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            if (ds.Tables[0].Rows[0]["payment_gateway_name"] != null)
                            {
                                if (ds.Tables[0].Rows[0]["payment_gateway_name"].ToString() == "CCAvenue")
                                {
                                    Session["ccAvanue"] = "Y";
                                }
                                else
                                {
                                    {
                                        Session["ccAvanue"] = null;
                                    }
                                }
                            }
                        }
                    }
                }



                Session["CurrentURL"] = HttpContext.Current.Request.Url.AbsoluteUri;
                Session["Provider_payment"] = price.InnerText + "|" + (checkboxOneYear_provider.Checked ? "1" : (checkboxTwoYear_provider.Checked ? "2" : "3"));
                Response.Redirect(Constants__.WEB_ROOT + "/partner-subscription", false);
                return;
            }

            catch (System.Exception ex)
            {
                BussinessEntity.ExceptionHandling.ErrorMessage = ex.Message;
                var st = new System.Diagnostics.StackTrace(ex, true);
                StackFrame[] stackFrames = st.GetFrames();
                foreach (StackFrame stackFrame in stackFrames)
                {
                    Console.WriteLine(stackFrame.GetMethod().Name);   // write method name
                    BussinessEntity.ExceptionHandling._lineno = stackFrame.GetFileLineNumber();
                    BussinessEntity.ExceptionHandling._methodname = Convert.ToString(stackFrame.GetMethod().Name);
                    BussinessEntity.ExceptionHandling._pagename = Convert.ToString(Request.Url.AbsoluteUri);

                }
                Response.Redirect(Constants__.WEB_ROOT + "/ErrorMessage.aspx", false);
                return;

            }
        }

        protected void CreditCard_Payment_Click(object sender, EventArgs e)
        {
            try
            {
                Utils.Mails mail = new Utils.Mails();
                mail.payNow_Click_Mail(Session["country_sk"].ToString(), Session["massage_partner_sk"].ToString());

                lblddlCreditCartTypes.Text = lblddlCreditCartBankNames.Text = "";

                if (ddlCreditCartTypes.SelectedValue == "0" || ddlCreditCartBankNames.SelectedValue == "0")
                {
                    if (ddlCreditCartTypes.SelectedValue == "0")
                    {
                        lblddlCreditCartTypes.Text = "Select Card Type";
                    }

                    if (ddlCreditCartBankNames.SelectedValue == "0")
                    {
                        lblddlCreditCartBankNames.Text = "Select Bank Name";
                    }

                    return;
                }


                if (Session["massage_partner_sk"] != null)
                {
                    DataSet ds = new DataSet();
                    int Banksk = Convert.ToInt32(ddlCreditCartBankNames.SelectedValue);
                    int cardsk = Convert.ToInt32(ddlCreditCartTypes.SelectedValue);
                    ds = objBusinessLogin.Insert_payment_bridge(Convert.ToInt32(Session["massage_partner_sk"].ToString()), "sp", cardsk, Banksk, "Credit Card");
                    if (ds.Tables.Count > 0)
                    {
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            if (ds.Tables[0].Rows[0]["payment_gateway_name"] != null)
                            {
                                if (ds.Tables[0].Rows[0]["payment_gateway_name"].ToString() == "CCAvenue")
                                {
                                    Session["ccAvanue"] = "Y";
                                }
                                else
                                {
                                    {
                                        Session["ccAvanue"] = null;
                                    }
                                }
                            }
                        }
                    }
                }


                Session["CurrentURL"] = HttpContext.Current.Request.Url.AbsoluteUri;
                Session["Provider_payment"] = price.InnerText + "|" + (checkboxOneYear_provider.Checked ? "1" : (checkboxTwoYear_provider.Checked ? "2" : "3"));
                Response.Redirect(Constants__.WEB_ROOT + "/partner-subscription", false);
                return;
            }

            catch (System.Exception ex)
            {
                BussinessEntity.ExceptionHandling.ErrorMessage = ex.Message;
                var st = new System.Diagnostics.StackTrace(ex, true);
                StackFrame[] stackFrames = st.GetFrames();
                foreach (StackFrame stackFrame in stackFrames)
                {
                    Console.WriteLine(stackFrame.GetMethod().Name);   // write method name
                    BussinessEntity.ExceptionHandling._lineno = stackFrame.GetFileLineNumber();
                    BussinessEntity.ExceptionHandling._methodname = Convert.ToString(stackFrame.GetMethod().Name);
                    BussinessEntity.ExceptionHandling._pagename = Convert.ToString(Request.Url.AbsoluteUri);

                }

                Response.Redirect(Constants__.WEB_ROOT + "/ErrorMessage.aspx", false);
                return;
            }
        }



        private StripeCustomer GetCustomer()
        {
            var mycust = new StripeCustomerCreateOptions();
            mycust.Email = "";
            mycust.Description = "";
            mycust.CardNumber = txtCardNumber_1.Text.Trim();
            mycust.CardExpirationMonth = txtCardExpirationMonth_1.Text.Trim();
            mycust.CardExpirationYear = txtCardExpirationYear_1.Text.Trim();
            // mycust.PlanId = "100";
            mycust.CardName = txtCardName_1.Text.Trim();
            mycust.CardAddressCity = "";
            mycust.CardAddressCountry = "";
            mycust.CardAddressLine1 = "";
            //mycust.TrialEnd = getrialend();
            ServicePointManager.SecurityProtocol = (SecurityProtocolType)3072;

            var customerservice = new StripeCustomerService(ConfigurationManager.AppSettings["StripeApiKey"].ToString());
            return customerservice.Create(mycust);
        }

      

        protected void Go_for_payment(DataSet ds, string payable_amt)
        {
            try
            {
                CCACrypto chkSum = new CCACrypto();
                string WorkingKey = ConfigurationManager.AppSettings["CCAVAnueWorkingKey"].ToString();
                Random rnd = new Random();
                int rnd_no = rnd.Next(100, 100000);
                string lblOrderId = ds.Tables[0].Rows[0]["massage_partner_sk"].ToString() + "_" + rnd_no;
                string lblAmount = payable_amt;



                string lblRedirectUrl = (Request.Url).ToString();
                lblRedirectUrl = lblRedirectUrl.Replace("?PayPal=Sub_Cancel", "");
                lblRedirectUrl = lblRedirectUrl.Replace("?PayPal=Info2468Cubek", "");


                string lblCustomerName = ds.Tables[0].Rows[0]["massage_partner_name"].ToString();
                string lblCustAddr = "Not Found";
                string lblCustCountry = "India";
                string lblCustPhone = ds.Tables[0].Rows[0]["phone_nos"].ToString();
                string lblCustEmail = ds.Tables[1].Rows[0]["email_id"].ToString();
                string lblCustState = "";
                string lblCustCity = "";
                string lblZipCode = ds.Tables[0].Rows[0]["postal_code"].ToString();

                string lblRedirectUrlFail = Constants__.WEB_ROOT + "/User/CCAvanueFailPArtner.aspx";
                string lblRedirectUrlsuccess = Constants__.WEB_ROOT + "/User/CCAvanuePassPartner.aspx";

                DataTable dt = new DataTable();
                DataColumn dc;


                dc = new DataColumn("lblOrderId");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);



                dc = new DataColumn("lblAmount");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);


                dc = new DataColumn("lblCustomerName");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dc = new DataColumn("lblCustAddr");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dc = new DataColumn("lblCustCountry");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dc = new DataColumn("lblCustPhone");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);


                dc = new DataColumn("lblCustEmail");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dc = new DataColumn("lblZipCode");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dc = new DataColumn("lblRedirectUrlsuccess");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dc = new DataColumn("lblRedirectUrlFail");
                dc.DataType = System.Type.GetType("System.String");
                dt.Columns.Add(dc);

                dt.Rows.Add(lblOrderId, lblAmount, lblCustomerName, lblCustAddr, lblCustCountry, lblCustPhone, lblCustEmail, lblZipCode, lblRedirectUrlsuccess, lblRedirectUrlFail);
                Session["CCAvanueDetails"] = dt;


                string lblCustNotes = "";
                string lblDelCustName = "";
                string lblDelCustAddr = "";
                string lblDelCustCntry = "";
                string lblDelCustTel = "";
                string lblDelCustState = "";
                string lblDelCustCity = "";
                string lblDelZipCode = "";

                string lblMerchantParam = "";
                string billingPageHeading = "";
                string lblPayType = "";

                string lblMerchantId = ConfigurationManager.AppSettings["CCAVAnuelblMerchantId"].ToString();
                string Res = chkSum.getchecksum(lblMerchantId, lblOrderId, lblAmount, lblRedirectUrl, WorkingKey);

                string ToEncrypt = "Order_Id=" + lblOrderId + "&Amount=" + lblAmount + "&Merchant_Id=" + lblMerchantId + "&Redirect_Url=" + lblRedirectUrl +
                    "&Checksum=" + Res + "&billing_cust_name=" + lblCustomerName + "&billing_cust_address=" + lblCustAddr + "&billing_cust_country=" + lblCustCountry +
                    "&billing_cust_tel=" + lblCustPhone + "&billing_cust_email=" + lblCustEmail + "&billing_cust_state=" + lblCustState +
                    "&billing_cust_city=" + lblCustCity + "&billing_zip_code=" + lblZipCode + "&billing_cust_notes=" + lblCustNotes +
                    "&delivery_cust_name=" + lblDelCustName + "&delivery_cust_address=" + lblDelCustAddr + "&delivery_cust_country=" + lblDelCustCntry +
                    "&delivery_cust_tel=" + lblDelCustTel + "&delivery_cust_state=" + lblDelCustState + "&delivery_cust_city=" + lblDelCustCity +
                    "&delivery_zip_code=" + lblDelZipCode + "&Merchant_Param=" + lblMerchantParam + "&billingPageHeading=" + billingPageHeading + "&payType=" + lblPayType;


                string Encrypted;


                Encrypted = chkSum.Encrypt(ToEncrypt, WorkingKey);

                Merchant_Id.Value = lblMerchantId;
                encRequest.Value = Encrypted;

                Session["Merchant_Id"] = lblMerchantId;
                Session["Encrypted"] = Encrypted;
                Session["Postbackurl_CCAvanueEncrypted"] = lblRedirectUrl;
                Response.Redirect(Constants__.WEB_ROOT + "/CCAvanue-Gatway-Redirection", false);
                return;
                //   ScriptManager.RegisterStartupScript(this, this.GetType(), "scriptsa", " postbackurl();", true);
            }
            catch (System.Exception ex)
            {
                BussinessEntity.ExceptionHandling.ErrorMessage = ex.Message;
                Business.BussinessSendMail send = new BussinessSendMail();
                Response.Redirect(Constants__.WEB_ROOT + "/massage-partner", false);
                return;
                //   send.SendMail("info@massage2book.com", "support@massage2book.com", "Exception occured with webservice", ex.Message + " " + " On Subscription Page M2B, currency conversion api from  USD to '" + curr1 + "'", null);
            }

        }

        private void HandlePayPalRedirection()
        {
            try
            {
                // *** Set a flag so we know we redirected
                Session["PayPal_Redirected"] = "True";

                // *** Save any values you might need when you return here
                Session["PayPal_OrderAmount"] = OrderAmount;  // already saved above

                //			Session["PayPal_HeardFrom"] = this.txtHeardFrom.Text;
                //			Session["PayPal_ToolUsed"] = this.txtToolUsed.Text;

                PayPalHelper PayPal = new PayPalHelper();
                PayPal.PayPalBaseUrl = App.Configuration.PayPalUrl;
                PayPal.AccountEmail = App.Configuration.AccountEmail;


                decimal us_doller_amount = Convert.ToDecimal(Session["Converted_Doller_amount"]);
                PayPal.Amount = us_doller_amount;


                PayPal.LogoUrl = "http://www.massage2book.com/images/m2b_logo.PNG";

                PayPal.ItemName = "Subscription Amount #" + new Guid().GetHashCode().ToString("x");

                // *** Have paypal return back to this URL


                string url_ = (Request.Url).ToString();
                url_ = url_.Replace("?PayPal=Sub_Cancel", "");
                url_ = url_.Replace("?PayPal=Info2468Cubek", "");
                PayPal.SuccessUrl = url_ + "?PayPal=Info2468Cubek";
                PayPal.CancelUrl = url_ + "?PayPal=Sub_Cancel";
                //append currecy code  //it is comming form table.
                int country_sk = 0;
                if (ViewState["country_sk"] != null)
                    country_sk = Convert.ToInt32(ViewState["country_sk"]);


                PayPal.Currency_code = obj.Get_Currency_Code(country_sk).ToString();
                string url = PayPal.GetSubmitUrl();
                Response.Redirect(url, false);
                return;
            }
            catch (System.Exception ex)
            {
                BussinessEntity.ExceptionHandling.ErrorMessage = ex.Message;
                var st = new System.Diagnostics.StackTrace(ex, true);
                StackFrame[] stackFrames = st.GetFrames();
                foreach (StackFrame stackFrame in stackFrames)
                {
                    Console.WriteLine(stackFrame.GetMethod().Name);   // write method name
                    BussinessEntity.ExceptionHandling._lineno = stackFrame.GetFileLineNumber();
                    BussinessEntity.ExceptionHandling._methodname = Convert.ToString(stackFrame.GetMethod().Name);
                    BussinessEntity.ExceptionHandling._pagename = Convert.ToString(Request.Url.AbsoluteUri);

                }

                Response.Redirect(Constants__.WEB_ROOT + "/ErrorMessage.aspx", false);
            }
        }

        protected void SubmitToPaypal(string replaced_str)
        {
            //////////// creating session for storing details

            //SavePromotion_session();

            ///////////////
            Session["OrderAmounts"] = replaced_str; //willl come from submit button

            // decimal OrderAmount;
            //  decimal OrderAmount;
            // *** Our simplistic 'order validation'
            try
            {
                //amount comming form subcription form
                OrderAmount = Convert.ToDecimal(Session["OrderAmounts"]);
            }
            catch
            {
                this.ShowError("Invalid Order Amount. Get a grip.");
                return;
            }


            // *** Dumb ass data simulation - this should only be set once the order is Validated!
            this.Session["OrderAmount"] = Session["OrderAmounts"];


            // *** Handle PayPal Processing seperately from ProcessCard() since it requires
            // *** passing off to another page on the PayPal Site.
            // *** This request will return to this page Cancel or Success querystring
            if (!this.PayPalReturnRequest)//PP
                this.HandlePayPalRedirection(); // this will end this request!
            else
            {
                // *** CC Processing
                if (!this.ProcessCreditCard())
                    return;    // failure - display error

                // *** Write the order amount (and enything else you might need into session)
                // *** Normally you'd probably write a PK for the final invoice so you 
                // *** can reload it on the Confirmation.aspx page

                Session["PayPal_OrderAmount"] = OrderAmount;
            }
            // *** TODO:  Save your order etc.
            // *** Show the confirmation page - don't transfer so they can refresh without error
            // Response.Redirect("Confirmation.aspx");
            ///
            /////////////////

        }

        public bool ProcessCreditCard()
        {
            // bool Result = false;

            //    ccProcessing CC = null;
            //    ccProcessors CCType = App.Configuration.CCProcessor;

            //    try
            //    {
            //        // *** Figure out which type to use
            //        if (CCType == ccProcessors.AccessPoint)
            //        {
            //            CC = new ccAccessPoint();
            //        }
            //        else if (CCType == ccProcessors.AuthorizeNet)
            //        {
            //            CC = new ccAuthorizeNet();
            //            CC.MerchantPassword = App.Configuration.CCMerchantPassword;
            //        }
            //        else if (CCType == ccProcessors.PayFlowPro)
            //        {
            //            CC = new ccPayFlowPro();
            //            CC.MerchantPassword = App.Configuration.CCMerchantPassword;
            //        }
            //        else if (CCType == ccProcessors.LinkPoint)
            //        {
            //            CC = new ccLinkPoint();
            //            CC.MerchantPassword = App.Configuration.CCMerchantId;
            //            CC.CertificatePath = App.Configuration.CCCertificatePath;   // "d:\app\MyCert.pem"
            //        }


            //        //CC.UseTestTransaction = true;

            //        // *** Tell whether we do SALE or Pre-Auth
            //        CC.ProcessType = App.Configuration.CCProcessType;

            //        // *** Disable this for testing to get provider response
            //        CC.UseMod10Check = true;

            //        CC.Timeout = App.Configuration.CCConnectionTimeout;  // In Seconds
            //        CC.HttpLink = App.Configuration.CCHostUrl;			 // The host Url format will vary with provider
            //        CC.MerchantId = App.Configuration.CCMerchantId;

            //        CC.LogFile = App.Configuration.CCLogFile;
            //        CC.ReferringUrl = App.Configuration.CCReferingOrderUrl;

            //        // *** Name can be provided as a single string or as firstname and lastname
            //        CC.Name = this.txtName.Text;
            //        //CC.Firstname = Cust.Firstname.TrimEnd();
            //        //CC.Lastname = Cust.Lastname.TrimEnd();
            //        // CC.Company = Cust.Company.TrimEnd();

            //        CC.Address = this.txtAddress.Text;
            //        CC.State = this.txtState.Text;
            //        CC.City = this.txtCity.Text;
            //        CC.Zip = this.txtZip.Text;
            //        CC.Country = this.txtCountryId.SelectedValue;	// 2 Character Country ID
            //        CC.Phone = this.txtPhone.Text;
            //        CC.Email = this.txtEmail.Text;

            //        CC.OrderAmount = decimal.Parse(this.txtOrderAmount.Text);

            //        //CC.TaxAmount = Inv.Tax;					// Optional

            //        CC.CreditCardNumber = this.txtCC.Text;
            //        CC.CreditCardExpiration = this.txtCCMonth.SelectedValue + "/" + this.txtCCYear.SelectedValue;

            //        CC.SecurityCode = this.txtSecurity.Text;

            //        // *** Make this Unique
            //        //CC.OrderId = Inv.Invno.TrimEnd() + "_" + DateTime.Now.ToString();
            //        CC.Comment = "Subscription Amount # " + new Guid().GetHashCode().ToString("x");

            //        Result = CC.ValidateCard();

            //        if (!Result)
            //        {
            //            this.lblErrorMessage.Text = CC.ValidatedMessage +
            //                "<hr>" +
            //                CC.ErrorMessage;
            //        }
            //        else
            //        {
            //            // *** Should be APPROVED
            //            this.lblErrorMessage.Text = CC.ValidatedMessage;
            //        }


            //        // *** Always write out the raw response
            //        if (wwUtils.Empty(CC.RawProcessorResult))
            //        {
            //            this.lblErrorMessage.Text += "<hr>" + "Raw Results:<br>" +
            //                                         CC.RawProcessorResult;
            //        }
            //    }
            //    catch (Exception ex)
            //    {

            //        this.lblErrorMessage.Text = "FAILED<hr>" +
            //                                    "Processing Error: " + ex.Message;

            return false;
            //    }

            //    return Result;
        }

        public void ShowError(string ErrorMessage)
        {
            try
            {
                // this.lblErrorMessage.InnerText = ErrorMessage + "<p>";
            }
            catch (System.Exception ex)
            {
                BussinessEntity.ExceptionHandling.ErrorMessage = ex.Message;
                var st = new System.Diagnostics.StackTrace(ex, true);
                StackFrame[] stackFrames = st.GetFrames();
                foreach (StackFrame stackFrame in stackFrames)
                {
                    Console.WriteLine(stackFrame.GetMethod().Name);   // write method name
                    BussinessEntity.ExceptionHandling._lineno = stackFrame.GetFileLineNumber();
                    BussinessEntity.ExceptionHandling._methodname = Convert.ToString(stackFrame.GetMethod().Name);
                    BussinessEntity.ExceptionHandling._pagename = Convert.ToString(Request.Url.AbsoluteUri);

                }

                Response.Redirect(Constants__.WEB_ROOT + "/ErrorMessage.aspx", false);
            }
        }
        #endregion
    }
}